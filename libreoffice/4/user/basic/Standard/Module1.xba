<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Module1" script:language="StarBasic">REM  *****  BASIC  *****

Sub csvtoods	REM put all csv files into a database first

Const cSource = &quot;Allpressurefiles&quot;   REM replace with your actual data source name (press F4 to check) *case sensitive

oDatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
oDataSource = oDatabaseContext.getByName(cSource) REM defines the name of the database
oConnection = oDataSource.GetConnection(&quot;&quot;,&quot;&quot;) REM connects to the database

oTables = oConnection.getTables() REM connects to the tables in the database
oElementNames() = oTables.getElementNames() REM gets a sequence of all names in the Database


for i = 0 to uBound(oElementNames()) REM for 1st iteration to last(count of number of tables in database) iteration 
   doc = StarDesktop.loadComponentFromURL(&quot;private:factory/scalc&quot;,&quot;_default&quot;,0,Array()) REM loads a new calc document

   
   shx=doc.getSheets()	REM returns the collection of sheets in the document.
   dbx=doc.DatabaseRanges REM provides access to the settings and options of a database range.
   sn = oElementNames(i) REM name of each table
   sdb = &quot;Import_&quot;&amp; i REM Import number
   
   shx.getByIndex(0).setName(sn) REM gets the first sheet and gives it the same name as the table 
   addr = createUnoStruct(&quot;com.sun.star.table.CellRangeAddress&quot;) REM contains a cell range address within a spreadsheet document
   addr.Sheet = 0 REM Sheet number 0
   if not dbx.hasByName(sdb) then dbx.addNewByName(sdb, addr) REM if dbx doesn&apos;t have sdb as a name then a new one is added using sdb and addr
   dbr = dbx.getByName(sdb) REM the database table as named by sdb
   a() = getNewImportDescriptor(cSource, sn, com.sun.star.sheet.DataImportMode.TABLE) REM import details (database name, table name, dataimportmode)
   rg = dbr.getReferredCells() REM returns the cell range object that is represented by the database table
   rg.doImport(a()) REM import using the import details provided by &apos;a&apos; and the range set by rg
    
   saveasURL = &quot;file:///C:/Users/DMRC/Documents/AndyR/OpenOffice/Runonmultiplefiles/Converted Docs/&quot; &amp; sn &amp; &quot;.ods&quot; REM URL of new .ods file with filename same as table
   Dim Dummy()	REM Empty Sequence
   doc.storeAsURL(saveasURL, Dummy())	REM Saves as
   doc.Close(True) REM closes the document
   REM unlink the database range if you like:
   &apos; dbx.removeByName(sdb)
next

oConnection.close()
End Sub

Function getNewImportDescriptor(src,stbl,ntype)
Dim a(2) as new com.sun.star.beans.PropertyValue
   a(0).Name = &quot;SourceType&quot;
   a(0).Value = ntype
   a(1).Name =&quot;DatabaseName&quot;
   a(1).Value = src
   a(2).Name =&quot;SourceObject&quot;
   a(2).Value= stbl
getNewImportDescriptor = a()
End Function


</script:module>