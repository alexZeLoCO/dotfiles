<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Master" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Sub MasterMain
End Sub

&apos; This is where the real work is done.
&apos; oDoc is the document to colorize.
&apos; sLang indicates the language to use.
&apos; sMode indicates determines the mode of 
&apos;   SEL = Currently selected text.
&apos;   DOC = The entire document
&apos;   CUR = Code around the current cursor position.
Sub FMT_MasterColorizer(oDoc, sLang$, sMode$)
  Dim sStyles()     &apos; Paragraph styles for code listings.
  Dim sTokens()     &apos; Keyword tokens.
  Dim sAltTokens()  &apos; Secondary Keyword tokens (like external commands)
  Dim sCharStyles() &apos; Character styles in order.
  Dim bAssembler As Boolean  : bAssembler = False

  Dim sInstructions() &apos; Assembler Instructions
  Dim sDirectives()   &apos; Assembler Directives
  Dim sOperators()    &apos; Assembler Operators such as XOR
  Dim sRegisters()    &apos; Assembler Registers

  Dim oSels         &apos; All selections, used for SEL mode.
  Dim oSel          &apos; One selection, used for SEL mode.
  Dim i%            &apos; Index variable, used for SEL mode.

  Dim oVCurs        &apos; View cursor, used for CUR mode.
  Dim oCurs         &apos; General cursor object, used for CUR and DOC modes.
  
  Dim oStartCurs    &apos; Used for DOC mode.
  Dim oEndCurs      &apos; Used for DOC mode.
  Dim bFoundCompStyle As Boolean

  call FMT_InitSpecialCharArrays()
  call FMT_InitParStyles(sStyles())
  
  Select Case sLang
    Case &quot;BASIC&quot;
      sCharStyles() = FMT_GetBasicCharacterStyles()
      call FMT_InitTokensBasic(sTokens())
      call FMT_InitAltTokensBasic(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bWordSep(ASC(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;\\&quot;)) = True
    Case &quot;Bash&quot;
      sCharStyles() = FMT_GetBashCharacterStyles()
      call FMT_InitTokensBash(sTokens())
      call FMT_InitAltTokensBash(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;\\&quot;)) = True
    Case &quot;Bat&quot;
      sCharStyles() = FMT_GetBatCharacterStyles()
      call FMT_InitTokensBat(sTokens())
      call FMT_InitAltTokensBat(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;\\&quot;)) = True
      bWordSep(ASC(&quot;_&quot;)) = False
    Case &quot;CPP&quot;
      sCharStyles() = FMT_GetCppCharacterStyles()
      call FMT_InitTokensCpp(sTokens())
      call FMT_InitAltTokensCpp(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
    Case &quot;GO&quot;
      sCharStyles() = FMT_GetGoCharacterStyles()
      call FMT_InitTokensGo(sTokens())
      call FMT_InitAltTokensGo(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
    Case &quot;SQL&quot;
      sCharStyles() = FMT_GetSQLCharacterStyles()
      call FMT_InitTokensSQL(sTokens())
      call FMT_InitAltTokensSQL(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bWordSep(Asc(&quot;_&quot;)) = False
    Case &quot;Rust&quot;
      sCharStyles() = FMT_GetRustCharacterStyles()
      call FMT_InitTokensRust(sTokens())
      call FMT_InitAltTokensRust(sAltTokens())
    Case &quot;JAVA&quot;
      sCharStyles() = FMT_GetJavaCharacterStyles()
      call FMT_InitTokensJava(sTokens())
      call FMT_InitAltTokensJava(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;#&quot;)) = False
      bWordSep(Asc(&quot;_&quot;)) = False
      bWordSep(Asc(&quot;.&quot;)) = False
    Case &quot;JS&quot;
      sCharStyles() = FMT_GetJSCharacterStyles()
      call FMT_InitTokensJS(sTokens())
      call FMT_InitAltTokensJS(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;#&quot;)) = False
      bWordSep(Asc(&quot;_&quot;)) = False
      bWordSep(Asc(&quot;.&quot;)) = False
    Case &quot;JSON&quot;
      sCharStyles() = FMT_GetJSONCharacterStyles()
      call FMT_InitTokensJSON(sTokens())
      call FMT_InitAltTokensJSON(sAltTokens())
      bCheckSpecial(Asc(&quot;&amp;&quot;)) = False
      bCheckSpecial(Asc(&quot;*&quot;)) = False
      bCheckSpecial(Asc(&quot;/&quot;)) = False
      bCheckSpecial(Asc(&quot;;&quot;)) = False
      bCheckSpecial(Asc(&quot;=&quot;)) = False
      bCheckSpecial(Asc(&quot;&lt;&quot;)) = False
      bCheckSpecial(Asc(&quot;&gt;&quot;)) = False
      bCheckSpecial(Asc(&quot;(&quot;)) = False
      bCheckSpecial(Asc(&quot;)&quot;)) = False
      bCheckSpecial(Asc(&quot;#&quot;)) = False
      bCheckSpecial(Asc(&quot;@&quot;)) = False
      bCheckSpecial(Asc(&quot;!&quot;)) = False
      bCheckSpecial(Asc(&quot;^&quot;)) = False
      bCheckSpecial(Asc(&quot;%&quot;)) = False
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;$&quot;)) = False
      bCheckSpecial(Asc(&quot;|&quot;)) = False
    Case &quot;Lisp&quot;
      sCharStyles() = FMT_GetLispCharacterStyles()
      call FMT_InitTokensLisp(sTokens())
      call FMT_InitAltTokensLisp(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;-&quot;)) = False
      bWordSep(ASC(&quot;_&quot;)) = False
      bWordSep(ASC(&quot;-&quot;)) = False
      bCheckSpecial(Asc(&quot;\\&quot;)) = True
    Case &quot;ObjC&quot;
      sCharStyles() = FMT_GetObjCCharacterStyles()
      call FMT_InitTokensObjC(sTokens())
      call FMT_InitAltTokensObjC(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
    Case &quot;Ruby&quot;
      sCharStyles() = FMT_GetRubyCharacterStyles()
      call FMT_InitTokensRuby(sTokens())
      call FMT_InitAltTokensRuby(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;#&quot;)) = False
      bWordSep(Asc(&quot;_&quot;)) = False
      bWordSep(Asc(&quot;.&quot;)) = False
    Case &quot;PHP&quot;
      sCharStyles() = FMT_GetPHPCharacterStyles()
      call FMT_InitTokensPHP(sTokens())
      call FMT_InitAltTokensPHP(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;#&quot;)) = False
      bCheckSpecial(Asc(&quot;?&quot;)) = true
    Case &quot;PERL&quot;
      sCharStyles() = FMT_GetPerlCharacterStyles()
      call FMT_InitTokensPerl(sTokens())
      call FMT_InitAltTokensPerl(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;~&quot;)) = True
      bCheckSpecial(Asc(&quot;\\&quot;)) = True
      bCheckSpecial(Asc(&quot;»&quot;)) = True
      bWordSep(Asc(&quot;»&quot;)) = True
    Case &quot;PYTHON&quot;
      sCharStyles() = FMT_GetPythonCharacterStyles()
      call FMT_InitTokensPython(sTokens())
      call FMT_InitAltTokensPython(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False &apos;?? Not sure!
      bCheckSpecial(Asc(&quot;~&quot;)) = True
      bCheckSpecial(Asc(&quot;`&quot;)) = True  &apos;?? Should this be a word separator
    Case &quot;R&quot;
      sCharStyles() = FMT_GetRCharacterStyles()
      call FMT_InitTokensR(sTokens())
      call FMT_InitAltTokensR(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False &apos;?? Not sure!
      bCheckSpecial(Asc(&quot;~&quot;)) = True
      bCheckSpecial(Asc(&quot;`&quot;)) = True  &apos;?? Should this be a word
    Case &quot;Squirrel&quot;
      sCharStyles() = FMT_GetSquirrelCharacterStyles()
      call FMT_InitTokensSquirrel(sTokens())
      call FMT_InitAltTokensSquirrel(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;#&quot;)) = False
      bWordSep(Asc(&quot;_&quot;)) = False
      bWordSep(Asc(&quot;.&quot;)) = False
    Case &quot;XML&quot;
      sCharStyles() = FMT_GetXMLCharacterStyles()
      call FMT_InitTokensXML(sTokens())
    Case &quot;CSharp&quot;
      sCharStyles() = FMT_GetCSharpCharacterStyles()
      call FMT_InitTokensCSharp(sTokens())
      call FMT_InitAltTokensCSharp(sAltTokens())
      bCheckSpecial(Asc(&quot;_&quot;)) = False
    Case &quot;8085&quot;
      sCharStyles() = FMT_GetAssemblerCharacterStyles()
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;~&quot;)) = False
      bCheckSpecial(Asc(&quot;\\&quot;)) = False
      bWordSep(Asc(&quot;\\&quot;)) = False
      bCheckSpecial(Asc(&quot;/&quot;)) = False
      bWordSep(Asc(&quot;/&quot;)) = False

      call FMT_InitTokensAssembler8085_Instructions(sInstructions())
      call FMT_InitTokensAssembler8085_Directives(sDirectives())
      call FMT_InitTokensAssembler8085_Operators(sOperators())
      call FMT_InitTokensAssembler8085_Registers(sRegisters())
      bAssembler = True
    Case &quot;X86&quot;
      sCharStyles() = FMT_GetAssemblerCharacterStyles()
      bCheckSpecial(Asc(&quot;_&quot;)) = False
      bCheckSpecial(Asc(&quot;~&quot;)) = True
      bCheckSpecial(Asc(&quot;\\&quot;)) = False

      call FMT_InitTokensAssemblerX86_Instructions(sInstructions())
      call FMT_InitTokensAssemblerX86_Directives(sDirectives())
      call FMT_InitTokensAssemblerX86_Operators(sOperators())
      call FMT_InitTokensAssemblerX86_Registers(sRegisters())
      bAssembler = True
    Case Else
      Print &quot;Unsupported language: &quot; &amp; sLang
      Exit Sub
  End Select

  REM This should never fail, because the get method creates the styles
  REM if they do not exist. Just a bit of paranoia, however!
  If NOT VerifyCharNames(oDoc, sCharStyles()) Then
    Exit Sub
  End If

  If sMode = &quot;SEL&quot; Then

    oSels = ThisComponent.getCurrentController().getSelection()
    For i = 0 To oSels.getCount() - 1
      oSel = oSels.getByIndex(i)
      If bAssembler Then
        call FMT_MasterOneRangeColorizerAssembler(oDoc, sLang$, oSel,  sInstructions(), sDirectives(), sOperators(), sRegisters(), sCharStyles())
      Else
        call FMT_MasterOneRangeColorizer(oDoc, sLang$, oSel, sTokens(), sAltTokens(), sCharStyles())
      End If
    Next

  ElseIf sMode = &quot;CUR&quot; Then

    REM Get the view cursor as the starting location
    oVCurs = oDoc.getCurrentController().getViewCursor()
    oCurs  = oVCurs.getText().createTextCursorByRange(oVCurs)
    If NOT VerifyParNames(oCurs.ParaStyleName, sStyles()) Then
      Exit sub
    End If
    call FMT_FindCodeAroundCursor(oCurs, sStyles())
    If bAssembler Then
      call FMT_MasterOneRangeColorizerAssembler(oDoc, sLang$, oCurs,  sInstructions(), sDirectives(), sOperators(), sRegisters(), sCharStyles())
    Else
      call FMT_MasterOneRangeColorizer(oDoc, sLang$, oCurs, sTokens(), sAltTokens(), sCharStyles())
    End If

  ElseIf sMode = &quot;DOC&quot; Then

    bFoundCompStyle = False
    oCurs = oDoc.getText().createTextCursor()
    oStartCurs = oDoc.getText().createTextCursor()
    oEndCurs = oDoc.getText().createTextCursor()
    oEndCurs.gotoStart(False)
    Do
      If FMT_ArrayHasString(oEndCurs.ParaStyleName, sStyles()) Then
        If NOT bFoundCompStyle Then
          bFoundCompStyle = True
          oCurs.gotoRange(oEndCurs, False)
          oCurs.gotoEndOfParagraph(True)
        Else
          oCurs.gotoNextParagraph(True)
          oCurs.gotoEndOfParagraph(True)
        End If
      Else
        If bFoundCompStyle Then
          bFoundCompStyle = False
          If bAssembler Then
            call FMT_MasterOneRangeColorizerAssembler(oDoc, sLang$, oCurs,  sInstructions(), sDirectives(), sOperators(), sRegisters(), sCharStyles())
          Else
            call FMT_MasterOneRangeColorizer(oDoc, sLang$, oCurs, sTokens(), sAltTokens(), sCharStyles())
          End If

        End If
      End If
    Loop While oEndCurs.gotoNextParagraph(False)
    If bFoundCompStyle Then
      bFoundCompStyle = False
      If bAssembler Then
        call FMT_MasterOneRangeColorizerAssembler(oDoc, sLang$, oCurs,  sInstructions(), sDirectives(), sOperators(), sRegisters(), sCharStyles())
      Else
        call FMT_MasterOneRangeColorizer(oDoc, sLang$, oCurs, sTokens(), sAltTokens(), sCharStyles())
      End If
    End If

  Else
    Print &quot;Unsupported mode: &quot; &amp; sMode
    Exit Sub
  End If
End Sub

Sub FMT_MasterOneRangeColorizer(oDoc, sLang$, oCurs, sTokens(), sAltTokens(), sCharStyles())
  Select Case sLang
    Case &quot;BASIC&quot;
      call FMT_ColorCodeOneRangeStringBasic(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;Bash&quot;
      call FMT_ColorCodeOneRangeStringBash(oCurs, sTokens(), sAltTokens(), sCharStyles(), &quot;#&quot;)
    Case &quot;Bat&quot;
      call FMT_ColorCodeOneRangeStringBat(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;CPP&quot;
      call FMT_ColorCodeOneRangeStringCpp(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;GO&quot;
      call FMT_ColorCodeOneRangeStringGo(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;CSharp&quot;
      call FMT_ColorCodeOneRangeStringCSharp(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;Lisp&quot;
      call FMT_ColorCodeOneRangeStringLisp(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;Rust&quot;
      call FMT_ColorCodeOneRangeStringRust(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;JAVA&quot;
      call FMT_ColorCodeOneRangeStringJava(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;JS&quot;
      call FMT_ColorCodeOneRangeStringJS(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;JSON&quot;
      call FMT_ColorCodeOneRangeStringJSON(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;ObjC&quot;
      call FMT_ColorCodeOneRangeStringObjC(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;Ruby&quot;
      call FMT_ColorCodeOneRangeStringRuby(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;PERL&quot;
      call FMT_ColorCodeOneRangeStringPerl(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;PHP&quot;
      call FMT_ColorCodeOneRangeStringPHP(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;PYTHON&quot;
      call FMT_ColorCodeOneRangeStringPython(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;R&quot;
      call FMT_ColorCodeOneRangeStringR(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;Squirrel&quot;
      call FMT_ColorCodeOneRangeStringSquirrel(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;SQL&quot;
      call FMT_ColorCodeOneRangeStringSQL(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case &quot;XML&quot;
      call FMT_ColorCodeOneRangeStringXML(oCurs, sTokens(), sAltTokens(), sCharStyles())
    Case Else
      Print &quot;Unsupported language: &quot; &amp; sLang
      Exit Sub
  End Select
End Sub

Sub FMT_MasterOneRangeColorizerAssembler(oDoc, sLang$, oCurs,  sInstructions(), sDirectives(), sOperators(), sRegisters(), sCharStyles())

  &apos;bCheckSpecial(Asc(&quot;_&quot;)) = False
  &apos;bCheckSpecial(Asc(&quot;~&quot;)) = False
  bCheckSpecial(Asc(&quot;?&quot;)) = True
  bWordSep(Asc(&quot;\\&quot;)) = False
  &apos;bCheckSpecial(Asc(&quot;/&quot;)) = False
  bWordSep(Asc(&quot;/&quot;)) = False
  bWordSep(Asc(&quot;~&quot;)) = False

  Select Case sLang
    Case &quot;8085&quot;
      bWordSep(ASC(&quot;_&quot;)) = False
      call FMT_ColorCodeOneRangeStringAssembler(oCurs, sInstructions(), sDirectives(), sOperators(), sRegisters(), sCharStyles(), &quot;;&quot;)
      bWordSep(ASC(&quot;_&quot;)) = True
    Case &quot;X86&quot;
      bWordSep(ASC(&quot;_&quot;)) = False
      call FMT_ColorCodeOneRangeStringAssembler(oCurs, sInstructions(), sDirectives(), sOperators(), sRegisters(), sCharStyles(), &quot;;&quot;)
      bWordSep(ASC(&quot;_&quot;)) = True
    Case Else
      Print &quot;Unsupported language: &quot; &amp; sLang
      Exit Sub
  End Select
End Sub


</script:module>