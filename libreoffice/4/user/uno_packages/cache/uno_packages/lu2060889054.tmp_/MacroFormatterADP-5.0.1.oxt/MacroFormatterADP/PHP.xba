<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="PHP" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

REM Author: Andrew D. Pitonyak
REM Date: March 31, 2014
REM License: Public Domain
REM I appreciate knowing about changes:

Sub MainPHP
  FMT_MasterColorizer(ThisComponent, &quot;PHP&quot;, &quot;CUR&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;PHP&quot;, &quot;SEL&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;PHP&quot;, &quot;DOC&quot;)
End Sub

Sub FMT_ColorCodeCurrentPHP()
  FMT_MasterColorizer(ThisComponent, &quot;PHP&quot;, &quot;CUR&quot;)
End Sub

REM Format just the selected text
Sub HighlightSelPHP()
  FMT_MasterColorizer(ThisComponent, &quot;PHP&quot;, &quot;SEL&quot;)
End Sub


&apos;****************************************************************
&apos;** Very simple parsing of PHP code.
&apos;****************************************************************
Sub FMT_ColorCodeOneRangeStringPHP(oSel, sTokens(), sAltTokens(), sCharStyles())
  Dim oCurs    &apos;Iterate paragraphs in the selected region.
  Dim oTCurs   &apos;Iterate the characters in a paragraph.
  Dim oText    &apos;Text object containing the selection.
  Dim iPos%
  Dim iLen%
  Dim i%       &apos;Temporary integer variable.
  Dim sChar$   &apos;Current character
  Dim sLine$   &apos;Current line (in lower case).
  Dim bComment As Boolean
  Dim bIsAsterick As Boolean

  REM We are not currently processing a comment.
  bComment = False
  REM Position oTCurs at the start of the selection.
  oText = oSel.getText()
  oTCurs = oText.createTextCursorByRange(oSel.getStart())
  oTCurs.goRight(0, False)

  REM oCurs contains the first paragraph.
  oCurs = FMT_CreateStartCursor(oText, oSel)

  Do While oText.compareRegionEnds(oCurs, oSel) &gt;= 0
    REM Now, process a single line of text!
    REM oCurs has selected the entire paragraph.
    REM oTCurs is at the start of the paragraph.
    sLine = LCase(oCurs.getString())
    iLen = Len(sLine)
    iPos = 1
    Do While iPos &lt;= iLen
      REM Skip leading white space.
      FMT_FindNextNonSpace(sLine, iPos%, iLen%)
      If iPos &gt; iLen Then Exit Do
      sChar = Mid(sLine, iPos, 1)

      REM Is the cursor in a multi-line comment?
      If bComment Then
        i = iPos
        Do while iPos &lt;= iLen
          REM Skip NON &apos;*&apos; characters
          Do 
            If Mid(sLine, iPos, 1) &lt;&gt; &quot;*&quot; Then Exit do
            iPos = iPos + 1
          Loop Until iPos &gt; iLen

          REM Check for &quot;*&quot;
          bIsAsterick = False
          If iPos &lt;= iLen Then
            Do While Mid(sLine, iPos, 1) = &quot;*&quot;
              bIsAsterick = True
              iPos = iPos + 1
              If iPos &gt; iLen Then Exit Do
            Loop
          End If

          REM Check for trailing &quot;/&quot;
          If iPos &lt;= iLen Then
            iPos = iPos + 1
            If Mid(sLine, iPos-1, 1) = &quot;/&quot; Then
              REM Found the end of the comment
              bComment = False
              Exit Do
            End If
          End if
        Loop
        oTCurs.goRight(i-1, False)
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Comment)
        oTCurs.gotoStartOfParagraph(False)
      ElseIf sChar = &quot;/&quot; AND iPos &lt; iLen Then
        Rem Might be a comment.
        If Mid(sLine, iPos+1, 1) = &quot;*&quot; Then
          REM This starts a multi-line comment.
          REM The fastest way to find the end comment is with the
          REM built in searching capability. Unfortunately, I can 
          REM not then manually set iPos so I will not do this.
          bComment = True
          oTCurs.goRight(iPos-1, False)
          oTCurs.goRight(2, True)
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Comment)
          iPos = iPos + 2
          oTCurs.gotoStartOfParagraph(False)
        ElseIf Mid(sLine, iPos+1, 1) = &quot;/&quot; Then
          REM This starts a single line comment.
          oTCurs.goRight(iPos-1, False)
          oTCurs.gotoEndOfParagraph(True)
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Comment)
          iPos = iLen + 1
        Else
          REM This is not a comment.
          oTCurs.goRight(iPos-1, False)
          oTCurs.gotoEndOfParagraph(True)
          &apos;oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Ident)
          iPos = iPos + 1
        End If
&apos;      ElseIf sChar = &quot;&apos;&quot; Then
&apos;        Rem Found a comment, mark the rest of the line.
&apos;        REM Move the character cursor from the paragraph start
&apos;        REM to the single quote character.
&apos;        REM Select the rest of the paragraph.
&apos;        oTCurs.goRight(iPos-1, False)
&apos;        oTCurs.gotoEndOfParagraph(True)
&apos;        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Comment)
&apos;        iPos = iLen + 1
      ElseIf sChar = &quot;&quot;&quot;&quot; OR sChar = &quot;&apos;&quot; Then
        REM Move to the first double quote
        oTCurs.goRight(iPos-1, False)

        REM Remember the location of the first double quote
        REM and then find then end of the quoted text.
        i = iPos
        FMT_FindEndQuoteEscape(sLine$, iPos%, iLen%)

        REM Move the cursor to the closing double quote.
        REM Set the character style for the string.
        REM Move the cursor back to the start of the paragraph.
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Literal)
        oTCurs.gotoRange(oCurs.start, False)
      ElseIf FMT_FindNumberEnd_Extended(sLine, iPos, iLen, i, &quot;_&quot;) Then
        REM Move to the number start.
        oTCurs.goRight(iPos-1, False)
        oTCurs.goRight(i - iPos, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Number)
        oTCurs.gotoRange(oCurs.start, False)
        iPos = i
      ElseIf sChar = &quot;.&quot; OR FMT_IsSpecialChar(ASC(sChar)) Then
        i = iPos
        oTCurs.goRight(iPos - 1, False)

        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then Exit Do
        Loop Until NOT FMT_IsSpecialChar(ASC(Mid(sLine, iPos, 1)))
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Special)
        oTCurs.gotoRange(oCurs.start, False)
      ElseIf sChar = &quot;#&quot; Then
        REM Variable with a strange name in quotes.
        REM Move to the #
        oTCurs.goRight(iPos-1, False)
        REM Remember the location of the #
        i = iPos

        REM It is an error if this is not true.
        If iPos &lt; iLen Then
          REM Remember the location of the first double quote
          REM and then find then end of the quoted text.
          i = iPos
          iPos = iPos + 1
          REM If this is not true, it is an error
          If Mid(sLine$, iPos, 1) = &quot;&quot;&quot;&quot; Then
            FMT_FindEndQuoteEscape(sLine$, iPos%, iLen%)
          End If
        End If
        REM Move the cursor to the closing double quote.
        REM Set the character style for the string.
        REM Move the cursor back to the start of the paragraph.
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Ident)
        oTCurs.gotoRange(oCurs.start, False)        
      Else
        REM No special characters, so this is a variable 
        REM or logic statement. Move to the first character.
        i = iPos
        oTCurs.goRight(iPos-1, False)
        Dim bCheckSpecialPound As Boolean : bCheckSpecialPound = bCheckSpecial(Asc(&quot;_&quot;))
        Dim bWordSepPeriod As Boolean : bWordSepPeriod =  bWordSep(ASC(&quot;.&quot;))
        
        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then 
            Exit Do
          End If
        Loop Until FMT_IsWordSep(Asc(Mid(sLine, iPos, 1)))

        oTCurs.goRight(iPos - i, True)
        sChar = LCase(oTCurs.getString())

        If FMT_ArrayHasString(sChar, sTokens()) Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
        ElseIf FMT_ArrayHasString(sChar, sAltTokens()) Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_AltWord)
        Else
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Ident)
        End If

        oTCurs.gotoRange(oCurs.start, False)
        bCheckSpecial(Asc(&quot;_&quot;)) = bCheckSpecialPound
        bWordSep(ASC(&quot;.&quot;)) = bWordSepPeriod
      End If
    Loop
    If Not oCurs.gotoNextParagraph(False) Then Exit Do
    oTCurs.gotoRange(oCurs, False)
    If NOT FMT_CursorToParEnd(oText, oSel, oCurs) Then Exit Do
  Loop
End Sub

&apos;****************************************************************
&apos;** Tokens recognized by PHP.
&apos;****************************************************************
Sub FMT_InitTokensPHP(sTokens())
  sTokens() = Array(&quot;__class__&quot;, &quot;__dir__&quot;, &quot;__file__&quot;, &quot;__function__&quot;, &quot;__halt_compiler&quot;, _
      &quot;__line__&quot;, &quot;__method__&quot;, &quot;__namespace__&quot;, &quot;__trait__&quot;, _
  	  &quot;abstract&quot;, &quot;and&quot;, &quot;array&quot;, &quot;as&quot;, _
  	  &quot;break&quot;, _
  	  &quot;callable&quot;, &quot;case&quot;, &quot;catch&quot;, &quot;class&quot;, &quot;clone&quot;, &quot;const&quot;, &quot;continue&quot;, _
  	  &quot;declare&quot;, &quot;default&quot;, &quot;die&quot;, &quot;do&quot;, _
  	  &quot;echo&quot;, &quot;else&quot;, &quot;elseif&quot;, &quot;empty&quot;, _
  	  &quot;enddeclare&quot;, &quot;endfor&quot;, &quot;endforeach&quot;, &quot;endif&quot;, &quot;endswitch&quot;, &quot;endwhile&quot;, &quot;eval&quot;, &quot;exit&quot;, &quot;extends&quot;, _
  	  &quot;final&quot;, &quot;for&quot;, &quot;foreach&quot;, &quot;function&quot;, _
  	  &quot;global&quot;, &quot;goto&quot;, _
  	  &quot;if&quot;, &quot;implements&quot;, &quot;include&quot;, &quot;include_once&quot;, &quot;instanceof&quot;, &quot;insteadof&quot;, &quot;interface&quot;, &quot;isset&quot;, &quot;list&quot;, _
  	  &quot;namespace&quot;, &quot;new&quot;, &quot;or&quot;, _
  	  &quot;php&quot;, &quot;print&quot;, &quot;private&quot;, &quot;protected&quot;, &quot;public&quot;, _
  	  &quot;require&quot;, &quot;require_once&quot;, &quot;return&quot;, _
  	  &quot;static&quot;, &quot;switch&quot;, &quot;throw&quot;, &quot;trait&quot;, &quot;try&quot;, _
  	  &quot;unset&quot;, &quot;use&quot;, &quot;var&quot;, &quot;while&quot;, &quot;xor&quot; )
  FMT_SortStringArrayAscending(sTokens())
End Sub

&apos;****************************************************************
&apos;** Alternate Tokens such as system class libraries and functions
&apos;** that you want to recognize.
&apos;****************************************************************
Sub FMT_InitAltTokensPHP(sAltTokens())
  sAltTokens() = Array()
  FMT_SortStringArrayAscending(sAltTokens())
End Sub

&apos;****************************************************************
&apos;** Get the character styles meant for highlighting PHP code.
&apos;** PHP formats character styles as an identifier.
&apos;****************************************************************
Function FMT_GetPHPCharacterStyles()
  CreatePHPCharStyles()
  FMT_GetPHPCharacterStyles() = Array( &quot;_PHPComment&quot;, _
      &quot;_PHPLiteral&quot;, &quot;_PHPKeyWord&quot;, _
      &quot;_PHPIdent&quot;, &quot;_PHPSpecial&quot;, &quot;_PHPNumber&quot;, &quot;_OOoComputerAltKeyWord&quot;)
End Function

</script:module>