<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Assembler" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

REM Character Style Name Index
Public const FMT_CSNI_Assem_Comment     = 0
Public const FMT_CSNI_Assem_Directive   = 1
Public const FMT_CSNI_Assem_Ident       = 2
Public const FMT_CSNI_Assem_Instruction = 3
Public const FMT_CSNI_Assem_Literal     = 4
Public const FMT_CSNI_Assem_Operator    = 5
Public const FMT_CSNI_Assem_Register    = 6
Public const FMT_CSNI_Assem_SpecialChar = 7

Sub MainAssembler8085
  FMT_MasterColorizer(ThisComponent, &quot;8085&quot;, &quot;CUR&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;8085&quot;, &quot;DOC&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;8085&quot;, &quot;SEL&quot;)
End Sub

&apos;****************************************************************
&apos;** Color code the Assembler code surrounding the view cursor.
&apos;****************************************************************
Sub FMT_ColorCodeCurrentAssembler8085()
  FMT_MasterColorizer(ThisComponent, &quot;8085&quot;, &quot;CUR&quot;)
End Sub

REM Highlight all code in this document.
Sub HighlightDocAssembler8085()
  FMT_MasterColorizer(ThisComponent, &quot;8085&quot;, &quot;DOC&quot;)

End Sub

REM Format just the selected text
Sub HighlightSelAssembler8085()
  FMT_MasterColorizer(ThisComponent, &quot;8085&quot;, &quot;SEL&quot;)
End Sub

&apos;****************************************************************
&apos;** Color code the Assembler code in the oSel range.
&apos;** Use the keywords in the sTokens() array.
&apos;****************************************************************
Sub FMT_ColorCodeOneRangeStringAssembler(oSel, sInstructionTokens(), sDirectiveTokens(), sOperatorTokens(), sRegisterTokens(), sCharStyles(), sCommentStart$)
  Dim oCurs    &apos;Iterate paragraphs in the selected region.
  Dim oTCurs   &apos;Iterate the characters in a paragraph.
  Dim oText    &apos;Text object containing the selection.
  Dim iPos%
  Dim iLen%
  Dim i%       &apos;Temporary integer variable.
  Dim sChar$   &apos;Current character
  Dim sLine$   &apos;Current line (in lower case).
  Dim iTempPos%
  Dim sWord$
  Dim iStyleToUse%

  REM Position oTCurs at the start of the selection.
  oText = oSel.getText()
  oTCurs = oText.createTextCursorByRange(oSel.getStart())
  oTCurs.goRight(0, False)

  REM oCurs contains the first paragraph, but not more than oSel.
  oCurs = FMT_CreateStartCursor(oText, oSel)

  REM Verify that oCurs ends before (or at the same place)
  REM as oSel.
  Do While oText.compareRegionEnds(oCurs, oSel) &gt;= 0
    REM Now, process a single line of text!
    REM oCurs has selected the entire paragraph.
    REM oTCurs is at the start of the paragraph.
    sLine = LCase(oCurs.getString())
    iLen = Len(sLine)
    iPos = 1
    Do While iPos &lt;= iLen
      REM Skip leading white space.
      FMT_FindNextNonSpace(sLine, iPos%, iLen%)
      If iPos &gt; iLen Then Exit Do
      

      REM Check for special words, because some special words
      REM will be mistaken for a number.
      REM Find the first word.
      iTempPos = iPos
      sWord = &quot;&quot;
      iStyleToUse = -1
      Do
         If iTempPos &gt; iLen Then Exit Do
         sChar = Mid(sLine, iTempPos, 1)
         If (sChar = &quot;.&quot; AND iTempPos = iPos) OR NOT FMT_IsWordSep(Asc(sChar)) Then
           sWord = sWord &amp; sChar
         Else
           Exit Do
         End If
         iTempPos = iTempPos + 1
      Loop Until False
      If Len(sWord) &gt; 0 Then
        sWord = LCase(sWord)
         If FMT_ArrayHasString(sWord, sInstructionTokens()) Then
          iStyleToUse = FMT_CSNI_Assem_Instruction
        ElseIf FMT_ArrayHasString(sWord, sDirectiveTokens()) Then
          iStyleToUse = FMT_CSNI_Assem_Directive
        ElseIf FMT_ArrayHasString(sWord, sOperatorTokens()) Then
          iStyleToUse = FMT_CSNI_Assem_Operator
        ElseIf FMT_ArrayHasString(sWord, sRegisterTokens()) Then
          iStyleToUse = FMT_CSNI_Assem_Register
        End If
      End If
      
      

      sChar = Mid(sLine, iPos, 1)
      If iStyleToUse &lt;&gt; -1 Then
        REM A special word was found, so deal with it.
        oTCurs.goRight(iPos-1, False)
        oTCurs.goRight(iTempPos - iPos, True)
        oTCurs.CharStyleName = sCharStyles(iStyleToUse)
        oTCurs.gotoRange(oCurs.start, False)
        iPos = iTempPos
        
      ElseIf sChar = sCommentStart Then
        Rem Found a comment, mark the rest of the line.
        REM Move the character cursor from the paragraph start
        REM to the single quote character.
        REM Select the rest of the paragraph.
        oTCurs.goRight(iPos-1, False)
        oTCurs.gotoEndOfParagraph(True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Assem_Comment)
        iPos = iLen + 1
      ElseIf sChar = &quot;&quot;&quot;&quot; OR sChar = &quot;&apos;&quot; Then
        REM Move to the first double quote
        oTCurs.goRight(iPos-1, False)

        REM Remember the location of the first double quote
        REM and then find then end of the quoted text.
        i = iPos
        FMT_FindEndQuoteDouble(sLine$, iPos%, iLen%)

        REM Move the cursor to the closing double quote.
        REM Set the character style for the string.
        REM Move the cursor back to the start of the paragraph.
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Assem_Literal)
        oTCurs.gotoRange(oCurs.start, False)
      ElseIf FMT_FindNumberSloppyHex(sLine, iPos, iLen, i) Then
      
        If i &lt;= iLen Then
          sChar = Mid(sLine, i, 1)
          If sChar = &quot;h&quot; OR sChar = &quot;b&quot; OR sChar = &quot;o&quot; OR sChar = &quot;w&quot; OR sChar = &quot;l&quot; OR sChar = &quot;q&quot; OR sChar = &quot;2&quot; Then
            i = i + 1
          End If
        End If
      
        REM Move to the number start.
        oTCurs.goRight(iPos-1, False)
        oTCurs.goRight(i - iPos, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Assem_Literal)
        oTCurs.gotoRange(oCurs.start, False)
        iPos = i
      ElseIf FMT_IsSpecialChar(ASC(sChar)) Then
        i = iPos
        oTCurs.goRight(iPos - 1, False)

        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then Exit Do
        Loop Until NOT FMT_IsSpecialChar(ASC(Mid(sLine, iPos, 1)))
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Assem_SpecialChar)
        oTCurs.gotoRange(oCurs.start, False)
      Else
        REM Make sure the cursor always advances by one.
        If iTempPos = iPos AND iTempPos &lt; iLen Then
          iTempPos = iTempPos + 1
        End If
        
        REM No special characters, so this is a variable 
        REM or logic statement. Move to the first character.
        oTCurs.goRight(iPos-1, False)
        oTCurs.goRight(iTempPos - iPos, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Assem_Ident)
        oTCurs.gotoRange(oCurs.start, False)
        iPos = iTempPos
      End If
    Loop
    If Not oCurs.gotoNextParagraph(False) Then Exit Do
    oTCurs.gotoRange(oCurs, False)
    If NOT FMT_CursorToParEnd(oText, oSel, oCurs) Then Exit Do
  Loop
End Sub

Sub FMT_InitTokensAssembler8085_Instructions(sTokens())
  sTokens() = Array( &quot;aci&quot;, &quot;adc&quot;, &quot;add&quot;, &quot;adi&quot;, &quot;ana&quot;, &quot;ani&quot;, _
    &quot;call&quot;, &quot;cc&quot;, &quot;cm&quot;, &quot;cma&quot;, &quot;cmc&quot;, &quot;cmp&quot;, &quot;cnc&quot;, &quot;cnz&quot;, &quot;cp&quot;, &quot;cpe&quot;, &quot;cpi&quot;, &quot;cpo&quot;, &quot;cz&quot;, _
    &quot;daa&quot;, &quot;dad&quot;, &quot;dcr&quot;, &quot;dcx&quot;, &quot;di&quot;, &quot;ei&quot;, &quot;hlt&quot;, &quot;in&quot;, &quot;inr&quot;, &quot;inx&quot;, _
    &quot;jc&quot;, &quot;jm&quot;, &quot;jmp&quot;, &quot;jnc&quot;, &quot;jnz&quot;, &quot;jp&quot;, &quot;jpe&quot;, &quot;jpo&quot;, &quot;jz&quot;, _
    &quot;lda&quot;, &quot;ldax&quot;, &quot;lhld&quot;, &quot;lxi&quot;, &quot;mov&quot;, &quot;mvi&quot;, &quot;nop&quot;, _
    &quot;ora&quot;, &quot;ori&quot;, &quot;out&quot;, &quot;pchl&quot;, &quot;pop&quot;, &quot;push&quot;, _
    &quot;ral&quot;, &quot;rar&quot;, &quot;rc&quot;, &quot;ret&quot;, &quot;rim&quot;, &quot;rlc&quot;, &quot;rm&quot;, &quot;rnc&quot;, &quot;rnz&quot;, &quot;rp&quot;, &quot;rpe&quot;, &quot;rpo&quot;, &quot;rrc&quot;, &quot;rst&quot;, &quot;rz&quot;, _
    &quot;sbb&quot;, &quot;sbi&quot;, &quot;shld&quot;, &quot;sim&quot;, &quot;sphl&quot;, &quot;sta&quot;, &quot;stax&quot;, &quot;stc&quot;, &quot;sub&quot;, &quot;sui&quot;, _
    &quot;xra&quot;, &quot;xri&quot;, &quot;xthl&quot; )
    Call FMT_SortStringArrayAscending(sTokens())
End Sub

Sub FMT_InitTokensAssembler8085_Directives(sTokens())
  sTokens() = Array( &quot;clist&quot;, &quot;common&quot;, &quot;db&quot;, &quot;ds&quot;, &quot;dw&quot;, &quot;elsec&quot;, &quot;end&quot;, &quot;endc&quot;, &quot;endm&quot;, &quot;equ&quot;, _
    &quot;fail&quot;, &quot;fields&quot;, &quot;ifc&quot;, &quot;ific&quot;, &quot;ifinc&quot;, &quot;ifnc&quot;, &quot;ifcc&quot;, &quot;include&quot;, _
    &quot;list&quot;, &quot;listf&quot;, &quot;macr&quot;, &quot;mc&quot;, &quot;md&quot;, &quot;mex&quot;, _
    &quot;name&quot;, &quot;nolist&quot;, &quot;nolist&quot;, &quot;nomc&quot;, &quot;nomd&quot;, &quot;nomex&quot;, &quot;noobj&quot;, &quot;nopage&quot;, &quot;nouna&quot;, _
    &quot;obj&quot;, &quot;opt&quot;, &quot;org&quot;,&quot;page&quot;, &quot;pagewidth&quot;, _
    &quot;section&quot;, &quot;spc&quot;, &quot;sym&quot;, &quot;ttl&quot;, &quot;una&quot;, &quot;xdef&quot;, &quot;xref&quot; )
    Call FMT_SortStringArrayAscending(sTokens())
End Sub

Sub FMT_InitTokensAssembler8085_Operators(sTokens())
  sTokens() = Array( &quot;and&quot;, &quot;eq&quot;, &quot;ge&quot;, &quot;gt&quot;, &quot;high&quot;, &quot;le&quot;, &quot;low&quot;, &quot;lt&quot;, _
    &quot;mod&quot;, &quot;ne&quot;, &quot;not&quot;, &quot;or&quot;, &quot;shl&quot;, &quot;shr&quot;, &quot;xor&quot; )
  Call FMT_SortStringArrayAscending(sTokens())
End Sub


Sub FMT_InitTokensAssembler8085_Registers(sTokens())
  sTokens() = Array( &quot;a&quot;, &quot;ac&quot;, &quot;b&quot;, &quot;bc&quot;, &quot;c&quot;, &quot;cy&quot;, &quot;d&quot;, &quot;de&quot;, &quot;e&quot;, &quot;h&quot;, &quot;hl&quot;, &quot;l&quot;, &quot;m&quot;, &quot;p&quot;, &quot;s&quot;, &quot;z&quot; )
  Call FMT_SortStringArrayAscending(sTokens())
End Sub


&apos;****************************************************************
&apos;** Get the character styles meant for highlighting Assembler code.
&apos;****************************************************************
Function FMT_GetAssemblerCharacterStyles()
  Call CreateAssemblerCharStyles()
  FMT_GetAssemblerCharacterStyles() = Array( &quot;_OOoAssemblerComment&quot;, _
   &quot;_OOoAssemblerDirective&quot;, _
   &quot;_OOoAssemblerIdent&quot;, _
   &quot;_OOoAssemblerInstruction&quot;, _
   &quot;_OOoAssemblerLiteral&quot;, _
   &quot;_OOoAssemblerOperator&quot;, _
   &quot;_OOoAssemblerRegister&quot;, _
   &quot;_OOoAssemblerSpecialChar&quot; )
End Function

</script:module>