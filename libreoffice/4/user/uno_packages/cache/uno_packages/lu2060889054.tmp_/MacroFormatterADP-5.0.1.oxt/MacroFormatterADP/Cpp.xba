<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Cpp" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

REM Author: Andrew D. Pitonyak
REM Date: December 12, 2009
REM License: Public Domain
REM I appreciate knowing about changes:

Sub MainCpp
  FMT_MasterColorizer(ThisComponent, &quot;CPP&quot;, &quot;CUR&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;CPP&quot;, &quot;SEL&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;CPP&quot;, &quot;DOC&quot;)
End Sub

Sub FMT_ColorCodeCurrentCpp()
  FMT_MasterColorizer(ThisComponent, &quot;CPP&quot;, &quot;CUR&quot;)
End Sub

REM Format just the selected text
Sub HighlightSelCpp()
  FMT_MasterColorizer(ThisComponent, &quot;CPP&quot;, &quot;SEL&quot;)
End Sub

&apos;****************************************************************
&apos;** Very simple parsing of C++ code.
&apos;****************************************************************
Sub FMT_ColorCodeOneRangeStringCpp(oSel, sTokens(), sAltTokens(), sCharStyles())
  Dim oCurs    &apos;Iterate paragraphs in the selected region.
  Dim oTCurs   &apos;Iterate the characters in a paragraph.
  Dim oText    &apos;Text object containing the selection.
  Dim iPos%
  Dim iLen%
  Dim i%       &apos;Temporary integer variable.
  Dim sChar$   &apos;Current character
  Dim sLine$   &apos;Current line (in lower case).
  Dim bComment As Boolean
  Dim bIsAsterick As Boolean
  Dim bIsRawString As Boolean : bIsRawString = False
  Dim sStrMarkers()
  Dim sRawLeader$

  FMT_CppStringLiteralMarker(sStrMarkers())

  REM We are not currently processing a comment.
  bComment = False
  REM Position oTCurs at the start of the selection.
  oText = oSel.getText()
  oTCurs = oText.createTextCursorByRange(oSel.getStart())
  oTCurs.goRight(0, False)

  REM oCurs contains the first paragraph.
  oCurs = FMT_CreateStartCursor(oText, oSel)

  Do While oText.compareRegionEnds(oCurs, oSel) &gt;= 0
    REM Now, process a single line of text!
    REM oCurs has selected the entire paragraph.
    REM oTCurs is at the start of the paragraph.
    sLine = LCase(oCurs.getString())
    iLen = Len(sLine)
    iPos = 1
    Do While iPos &lt;= iLen
      REM Skip leading white space.
      FMT_FindNextNonSpace(sLine, iPos%, iLen%)
      If iPos &gt; iLen Then Exit Do
      sChar = Mid(sLine, iPos, 1)

      REM Is the cursor in a multi-line comment?
      If bComment Then
        i = iPos
        Do while iPos &lt;= iLen
          REM Skip NON &apos;*&apos; characters
          Do 
            If Mid(sLine, iPos, 1) &lt;&gt; &quot;*&quot; Then Exit do
            iPos = iPos + 1
          Loop Until iPos &gt; iLen

          REM Check for &quot;*&quot;
          bIsAsterick = False
          If iPos &lt;= iLen Then
            Do While Mid(sLine, iPos, 1) = &quot;*&quot;
              bIsAsterick = True
              iPos = iPos + 1
              If iPos &gt; iLen Then Exit Do
            Loop
          End If

          REM Check for trailing &quot;/&quot;
          If iPos &lt;= iLen Then
            iPos = iPos + 1
            If Mid(sLine, iPos-1, 1) = &quot;/&quot; Then
              REM Found the end of the comment
              bComment = False
              Exit Do
            End If
          End if
        Loop
        oTCurs.goRight(i-1, False)
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Comment)
        oTCurs.gotoStartOfParagraph(False)
      ElseIf sChar = &quot;/&quot; AND iPos &lt; iLen Then
        Rem Might be a comment.
        If Mid(sLine, iPos+1, 1) = &quot;*&quot; Then
          REM This starts a multi-line comment.
          REM The fastest way to find the end comment is with the
          REM built in searching capability. Unfortunately, I can 
          REM not then manually set iPos so I will not do this.
          bComment = True
          oTCurs.goRight(iPos-1, False)
          oTCurs.goRight(2, True)
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Comment)
          iPos = iPos + 2
          oTCurs.gotoStartOfParagraph(False)
        ElseIf Mid(sLine, iPos+1, 1) = &quot;/&quot; Then
          REM This starts a single line comment.
          oTCurs.goRight(iPos-1, False)
          oTCurs.gotoEndOfParagraph(True)
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Comment)
          iPos = iLen + 1
        Else
          REM This is not a comment.
          oTCurs.goRight(iPos-1, False)
          oTCurs.gotoEndOfParagraph(True)
          &apos;oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Ident)
          iPos = iPos + 1
        End If
      ElseIf sChar = &quot;&quot;&quot;&quot; OR sChar = &quot;&apos;&quot; Then
        If bIsRawString Then
          &apos; A raw string is formatted by preceding a string with a R
          &apos; c = u8R&quot;del[raw UTF-8 string]del&quot;; 
          &apos; This formats &quot;del[ and ]del&quot; as a special character.
          &apos; Perhaps not the best choice, but this is what I do.
          bIsRawString = False
          REM Move to past the first double quote
          oTCurs.goRight(iPos, False)
          REM Save the position
          i = iPos
          REM Move past the first &apos;[&apos; character
          FMT_FindCharNoESC(sLine$, iPos%, iLen%, &quot;[&quot;)
          If iPos &gt;= i + 1 Then
            oTCurs.goRight(iPos-i-1, True)
            oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Special)
            sRawLeader = LCase(oTCurs.getString())
            sRawLeader = &quot;]&quot; &amp; Left(sRawLeader, Len(sRawLeader) - 1) &amp; &quot;&quot;&quot;&quot;
            i = iPos
            FMT_FindCharNoESC(sLine$, iPos%, iLen%, sRawLeader)
            oTCurs.goRight(0, False)
            oTCurs.goRight(iPos-i-1, True)
            oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Literal)
            oTCurs.goRight(0, False)
            oTCurs.goRight(Len(sRawLeader), True)
            oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Special)
            oTCurs.gotoRange(oCurs.start, False)
            iPos = iPos + Len(sRawLeader)
          Else
            Print &quot;A raw string encoding was specified by preceding &quot; &amp; _
                  &quot;the quote character with an R, but the open &quot; &amp; _
                  &quot;bracket ([) was not found in the string.&quot;
             iPos = iLen
          End If
        Else
          REM Move to the first double quote
          oTCurs.goRight(iPos-1, False)

          REM Remember the location of the first double quote
          REM and then find then end of the quoted text.
          i = iPos
          FMT_FindEndQuoteEscape(sLine$, iPos%, iLen%)

          REM Move the cursor to the closing double quote.
          REM Set the character style for the string.
          REM Move the cursor back to the start of the paragraph.
          oTCurs.goRight(iPos - i, True)
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Literal)
          oTCurs.gotoRange(oCurs.start, False)
        End If
      ElseIf FMT_FindNumberEnd_Extended(sLine, iPos, iLen, i, &quot;&quot;) Then
        REM Move to the number start.
        oTCurs.goRight(iPos-1, False)
        oTCurs.goRight(i - iPos, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Literal)
        oTCurs.gotoRange(oCurs.start, False)
        iPos = i
      ElseIf sChar = &quot;.&quot; OR FMT_IsSpecialChar(ASC(sChar)) Then
        i = iPos
        oTCurs.goRight(iPos - 1, False)

        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then Exit Do
        Loop Until NOT FMT_IsSpecialChar(ASC(Mid(sLine, iPos, 1)))
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Special)
        oTCurs.gotoRange(oCurs.start, False)
      Else
        REM No special characters, so this is a variable 
        REM or logic statement. Move to the first character.
        i = iPos
        oTCurs.goRight(iPos-1, False)
        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then 
            Exit Do
          End If
        Loop Until FMT_IsWordSep(Asc(Mid(sLine, iPos, 1)))
        oTCurs.goRight(iPos - i, True)
        sChar = LCase(oTCurs.getString())

        If FMT_ArrayHasString(sChar, sTokens()) Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
        ElseIf FMT_ArrayHasString(sChar, sAltTokens()) Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_AltWord)
        ElseIf FMT_ArrayHasString(sChar, sStrMarkers()) AND _
                                  Mid(sLine, iPos, 1) = &quot;&quot;&quot;&quot; Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
          bIsRawString = FMT_StrEndsWith(sChar, &quot;r&quot;)
        Else
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Ident)
        End If

        oTCurs.gotoRange(oCurs.start, False)
      End If
    Loop
    If Not oCurs.gotoNextParagraph(False) Then Exit Do
    oTCurs.gotoRange(oCurs, False)
    If NOT FMT_CursorToParEnd(oText, oSel, oCurs) Then Exit Do
  Loop
End Sub

&apos;****************************************************************
&apos;** Tokens recognized by c++
&apos;****************************************************************
Sub FMT_InitTokensCpp(sTokens())
  sTokens() = Array(&quot;alignas&quot;, &quot;alignof&quot;, &quot;and&quot;, &quot;and_eq&quot;, &quot;asm&quot;, &quot;atomic_cancel&quot;, &quot;atomic_commit&quot;, &quot;atomic_noexcept&quot;, &quot;auto&quot;, _
    &quot;bitand&quot;, &quot;bitor&quot;, &quot;bool&quot;, &quot;break&quot;, _
    &quot;case&quot;, &quot;catch&quot;, &quot;char&quot;, &quot;char16_t&quot;, &quot;char32_t&quot;, &quot;char8_t&quot;, &quot;class&quot;, &quot;compl&quot;, _
    &quot;concept&quot;, &quot;const&quot;, &quot;constexpr&quot;, &quot;consteval&quot;, &quot;constexpr&quot;, &quot;constinit&quot;, &quot;const_cast&quot;, &quot;continue&quot;, _
    &quot;co_await&quot;, &quot;co_return&quot;, &quot;co_yield&quot;, _
    &quot;decltype&quot;, &quot;default&quot;, &quot;define&quot;, &quot;defined&quot;, &quot;delete&quot;, _
    &quot;do&quot;, &quot;double&quot;, &quot;dynamic_cast&quot;, _
    &quot;elif&quot;, &quot;else&quot;, &quot;endif&quot;, &quot;enum&quot;, &quot;error&quot;, _
    &quot;explicit&quot;, &quot;export&quot;, &quot;extern&quot;, _
    &quot;false&quot;, &quot;final&quot;, &quot;float&quot;, &quot;for&quot;, &quot;friend&quot;, &quot;goto&quot;, _
    &quot;if&quot;, &quot;ifdef&quot;, &quot;ifndef&quot;, &quot;import&quot;, &quot;include&quot;, &quot;inline&quot;, &quot;int&quot;, &quot;line&quot;, &quot;long&quot;, _
    &quot;module&quot;, &quot;mutable&quot;, _
    &quot;namespace&quot;, &quot;new&quot;, &quot;noexcept&quot;, &quot;not&quot;, &quot;not_eq&quot;, &quot;nullptr&quot;, _
    &quot;operator&quot;, &quot;or&quot;, &quot;or_eq&quot;, &quot;override&quot;, _
    &quot;pragma&quot;, &quot;private&quot;, &quot;protected&quot;, &quot;public&quot;, _
    &quot;reflexpr&quot;, &quot;register&quot;, &quot;reinterpret_cast&quot;, &quot;requires&quot;, &quot;return&quot;, _
    &quot;short&quot;, &quot;signed&quot;, &quot;sizeof&quot;, &quot;static&quot;, &quot;static_assert&quot;, &quot;static_cast&quot;, _
    &quot;std&quot;, &quot;struct&quot;, &quot;switch&quot;, &quot;synchronized&quot;, _
    &quot;template&quot;, &quot;this&quot;, &quot;thread_local&quot;, &quot;throw&quot;, _
    &quot;transaction_safe&quot;, &quot;transaction_safe_dynamic&quot;, _
    &quot;true&quot;, &quot;try&quot;, &quot;typedef&quot;, &quot;typeid&quot;, &quot;typename&quot;, _
    &quot;undef&quot;, &quot;union&quot;, &quot;unsigned&quot;, &quot;using&quot;, _
    &quot;virtual&quot;, &quot;void&quot;, &quot;volatile&quot;, _
    &quot;wchar_t&quot;, &quot;while&quot;, _
    &quot;xor&quot;, &quot;xor_eq&quot;, _
    &quot;__has_include&quot;, &quot;__has_cpp_attribute&quot; )
  FMT_SortStringArrayAscending(sTokens())
End Sub

&apos;****************************************************************
&apos;** Alternate Tokens such as system class libraries and functions
&apos;** that you want to recognize.
&apos;****************************************************************
Sub FMT_InitAltTokensCpp(sAltTokens())
  sAltTokens() = Array()
  FMT_SortStringArrayAscending(sAltTokens())
End Sub

&apos;****************************************************************
&apos;** C++ string literals may be preceded by things such as U8 to 
&apos;** indicate a unicode character.
&apos;****************************************************************
Sub FMT_CppStringLiteralMarker(sTokens())
  sTokens() = Array(&quot;l&quot;, &quot;r&quot;, &quot;u&quot;, &quot;ur&quot;, &quot;u8&quot;, &quot;u8r&quot;)
  FMT_SortStringArrayAscending(sTokens())
End Sub

&apos;****************************************************************
&apos;** Get the character styles meant for highlighting Cpp code.
&apos;** Format special characters with the Base color.
&apos;****************************************************************
Function FMT_GetCppCharacterStyles()
  FMT_GetCppCharacterStyles() = FMT_GetBasicCharacterStyles()
End Function

</script:module>