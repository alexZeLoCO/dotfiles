<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Strings" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

REM Author: Andrew D. Pitonyak
REM Date: June 16, 2009
REM License: Public Domain

Private bCheckWhite(0 To 256) As Boolean
Private bCheckSpecial(0 To 256) As Boolean
private bWordSep(0 To 256) As Boolean

Sub TestSpecialChars
  Dim ss$
  Dim n%
  Dim s$    : s    = &quot;how    are you?&quot;
  Dim iPos% : iPos = 4
  Dim iLen% : iLen = Len(s)
  Dim x
  Dim i       As Long
  Dim nIts    As Long
  Dim nMinIts As Long  : nMinIts = 1000
  Dim nNow    As Long
  Dim nNum    As Long  : nNum    = 2000
  Dim nFirst  As Long  : nFirst  = GetSystemTicks()
  Dim nLast   As Long  : nLast   = nFirst + nNum
  Dim iEnd%
  Dim b As Boolean

  ss = &quot;1.3f+3.2x&quot;
  iPos = 1
  b = FMT_FindNumberEnd(ss$, iPos%, Len(ss), iEnd%)
  Print ss &amp; &quot; ==&gt; &quot; &amp; b &amp; &quot; end = &quot; &amp; iEnd
  &apos;Exit Sub

  FMT_InitSpecialCharArrays()

  Do
    For i = 1 To nMinIts
      FMT_FindNextNonSpace(s, iPos%, iLen%)
    Next
    nIts = nIts + 1
    nNow = GetSystemTicks()
  Loop Until nNow &gt;= nLast
  MsgBox &quot;Finished with &quot; &amp; CStr(nIts * nMinIts) &amp; _
         &quot; Iterations&quot; &amp; CHR$(10) &amp; _
         CStr(CDbl(nIts * nMinIts) * 1000 / CDbl(nNow - nFirst) &amp; _
         &quot; its/second&quot;
End Sub

&apos;****************************************************************
&apos;** Sort the sItems() array in ascending order.
&apos;** The algorithm is simple and inefficient. 
&apos;** The worst case runtime is O(n^2). If you bother to do the 
&apos;** math, you will get (n^2-4n+1)/2, not that it matters.
&apos;****************************************************************
Sub FMT_SortStringArrayAscending(sItems())
  Dim i As Integer        &apos;Outer index variable
  Dim j As Integer        &apos;Inner index variable
  Dim s As String         &apos;Temporary to swap two values.
  Dim bChanged As Boolean &apos;Becomes True when something changes
  For i = LBound(sItems()) To UBound(sItems()) - 1
    bChanged = False
    For j = UBound(sItems()) To i+1 Step -1
      If sItems(j) &lt; sItems(j-1) Then
        s = sItems(j) : sItems(j) = sItems(j-1) : sItems(j-1) = s
        bChanged = True
      End If
    Next
    If Not bChanged Then Exit For
  Next
End Sub

&apos;****************************************************************
&apos;** Determine if an array contains a specific string.
&apos;** Although a binary search is is faster for large arrays, I
&apos;** expect small arrays here, so a linear search might be faster.
&apos;****************************************************************
Function FMT_ArrayHasString(s$, sItems()) As Boolean
  Dim i   As Integer 
  Dim iUB As Integer
  Dim iLB As Integer
  FMT_ArrayHasString() = False

  iUB = UBound(sItems())
  iLB = LBound(sItems())
  If iUB &gt;= iLB Then
    Do 
      i = (iUB + iLB) \ 2
      If sItems(i) = s Then
        FMT_ArrayHasString() = True
        iLB = iUB + 1
        &apos;Exit Do
      ElseIf sItems(i) &gt; s Then
        iUB = i - 1
      Else
        iLB = i + 1
      End If
    Loop While iUB &gt;= iLB
  End If
End Function

&apos;****************************************************************
&apos;** Insert a string in an array in formatted order. 
&apos;** n% is the number of items in the array.
&apos;** The array is assumed to have room for one more item.
&apos;** Return True if s$ is inserted into the array, and False if
&apos;** the item is not inserted into the array. If it is not inserted, 
&apos;** this means that it was already there (so it avoids duplicates).
&apos;****************************************************************
Function FMT_InsertSortedArray(n%, s$, sItems()) As Boolean
  Dim i As Integer
  Dim j As Integer
  i = FMT_IndexInArray(n%, s$, sItems())
  If i &gt;= n Then
    FMT_InsertSortedArray = True
    sItems(n) = s
    Exit Function
  End If
  If sItems(i) = s Then
    FMT_InsertSortedArray = False
    Exit Function
  End If
  For j = n To i+1 Step -1
    sItems(j) = sItems(j-1)
  Next
  sItems(i) = s
  FMT_InsertSortedArray = True
End Function

&apos;****************************************************************
&apos;** Find a string in an array. n% is the number of items in the array.
&apos;** Return the index where the string should be.
&apos;****************************************************************
Function FMT_IndexInArray(n%, s$, sItems()) As Integer
  Dim i   As Integer 
  Dim iUB As Integer
  Dim iLB As Integer
  If n = 0 Then
    FMT_IndexInArray() = n
    Exit Function
  End If

  iUB = n - 1
  iLB = LBound(sItems())
  Do 
    i = (iUB + iLB) \ 2
    If sItems(i) = s Then
      FMT_IndexInArray() = i
      Exit Function
      &apos;iLB = iUB + 1
    ElseIf sItems(i) &gt; s Then
      iUB = i - 1
    Else
      iLB = i + 1
    End If
  Loop While iUB &gt;= iLB
  FMT_IndexInArray() = iLB
End Function


&apos;****************************************************************
&apos;** Increment iPos until it points at the first non-white space
&apos;** character; or past the end of the line.
&apos;****************************************************************
Sub FMT_FindNextNonSpace(sLine$, iPos%, iLen%)
  If iPos &lt;= iLen Then
    REM Position the cursor AFTER the white space.
    Do While FMT_IsWhiteSpace(Asc(Mid(sLine, iPos, 1)))
      iPos = iPos + 1
      If iPos &gt; iLen Then Exit Do
    Loop
  End If
End Sub

&apos;****************************************************************
&apos;** Increment iPos until it points past the specified String.
&apos;****************************************************************
Sub FMT_FindCharNoESC(s$, iPos%, iLen%, sChar$)
  Dim sCur$
  Dim iCharLen%
  Dim iMaxPos%
  iCharLen% = Len(sChar)
  iMaxPos% = iLen - iCharLen

  iPos = iPos + 1
  If iPos &lt; iMaxPos Then
    Do
      sCur = Mid(s, iPos, iCharLen)
      iPos = iPos + 1
      If iPos &gt; iLen Then Exit Do
    Loop Until sCur = sChar
  End If
End Sub

&apos;****************************************************************
&apos;** Increment iPos until it points past the closing quote.
&apos;** It is not possible to have a quote character in the string.
&apos;****************************************************************
Sub FMT_FindEndQuote(s$, iPos%, iLen%)
  Dim sQuote$  : sQuote = Mid(s, iPos, 1)

  iPos = iPos + 1
  If iPos &lt;= iLen Then
    Do While Mid(s, iPos, 1) &lt;&gt; sQuote
      iPos = iPos + 1
      If iPos &gt; iLen Then Exit Do
    Loop
    Rem iPos might point two past the string...
    iPos = iPos + 1
  End If
End Sub

&apos;****************************************************************
&apos;** 
&apos;** 
&apos;** iPos Current position, assumed to be an unprocessed character.
&apos;** iLen
&apos;** iDepth is the current open paren depth.
&apos;** sOpen is the open character such as &quot;(&quot;, &quot;[&quot;, or &quot;{&quot;
&apos;** sOpen is the close character such as &quot;)&quot;, &quot;]&quot;, or &quot;}&quot;
&apos;**
&apos;** On return, iPos points to the close paren that takes the depth 
&apos;** to zero, or, it points past the end of the string.
&apos;**
&apos;****************************************************************
Sub FMT_FindCloseParen(s$, iPos%, iLen%, iDepth%, sOpen$, sClose$)
  Do While iDepth &gt; 0 And iPos &lt;= iLen
    If Mid(s, iPos, 1) = sOpen Then
      iDepth = iDepth + 1
    ElseIf Mid(s, iPos, 1) = sClose Then
      iDepth = iDepth - 1
    End If
    If iDepth &gt; 0 Then
      iPos = iPos + 1
    End If
  Loop
End Sub

&apos;****************************************************************
&apos;** Increment iPos until it points past the closing quote.
&apos;** Preceding a quote with \ escapes it.
&apos;****************************************************************
Sub FMT_FindEndQuoteEscape(s$, iPos%, iLen%)
  Dim sQuote$  : sQuote = Mid(s, iPos, 1)
  Dim sCur$

  iPos = iPos + 1
  FMT_MultiLineEscapedQuote(sQuote, &quot;\&quot;, s$, iPos, iLen)
End Sub

&apos;****************************************************************
&apos;** Increment iPos until it points past the closing quote.
&apos;** Preceding a quote with an escapes character to skip it.
&apos;** Returns true if the end was reached, false otherwise.
&apos;****************************************************************
Function FMT_MultiLineEscapedQuote(sQuote$, sEscape$, s$, iPos%, iLen%)
  Dim sCur$
  FMT_MultiLineEscapedQuote = False
  Do While iPos &lt;= ILen
    sCur = Mid(s, iPos, 1)
    iPos = iPos + 1
    If sCur = sQuote Then
      FMT_MultiLineEscapedQuote = True
      Exit Do
    End If
    If sCur = sEscape Then iPos = iPos + 1
  Loop
End Function

&apos;****************************************************************
&apos;** Increment iPos until it points past the closing quote.
&apos;** Preceding a quote with a quote escapes it.
&apos;****************************************************************
Sub FMT_FindEndQuoteDouble(s$, iPos%, iLen%)
  Dim sQuote$  : sQuote = Mid(s, iPos, 1)

  iPos = iPos + 1
  Do While iPos &lt;= iLen
    If Mid(s, iPos, 1) &lt;&gt; sQuote OR iPos = iLen Then
      iPos = iPos + 1
    Else
      REM iPos references a quote character AND we are not 
      REM at the end of the string.
      iPos = iPos + 1
      If Mid(s, iPos, 1) &lt;&gt; sQuote Then Exit Do
      REM there were two double quote characters, ignore them.
      iPos = iPos + 1
    End If
  Loop
  REM Never point more than one past the end.
  If iPos &gt; iLen Then iPos = iLen + 1
End Sub



REM I don&apos;t care if this is perfect, just that it works most of the time.
REM I call this from the assembler module.
Function FMT_FindNumberSloppyHex(sLine$, iPos%, iLen%, iEnd%) As Boolean
  Dim sChar$
  Dim bDecimal As Boolean

  iEnd = iPos
  bDecimal = False
  sChar = &quot;&quot;
  REM Skip leading digits.
  Do While FMT_IsDigit(ASC(Mid(sLine, iEnd, 1)))
    iEnd = iEnd + 1
    If iEnd &gt; iLen Then Exit do
  Loop
  
  If iEnd &gt; iPos AND iEnd &lt;= iLen Then
    Do While FMT_IsHexDigit(ASC(Mid(sLine, iEnd, 1)))
      iEnd = iEnd + 1
      If iEnd &gt; iLen Then Exit do
    Loop
  End If
  
  REM Check for hex digits such as 0xFF.
  REM No use for Basic, only for other languages. 
  REM The following must be true:
  REM -- found a single character
  REM -- more than one character to process
  REM -- the single found character must be 0
  If iEnd - iPos = 1 AND iEnd &lt; iLen AND Mid(sLine, iPos, 1) = &quot;0&quot; Then
    If Mid(sLine, iEnd, 1) = &quot;x&quot; OR Mid(sLine, iEnd, 1) = &quot;X&quot; Then
      If FMT_IsHexDigit(ASC(Mid(sLine, iEnd + 2, 1))) Then
        FMT_FindNumberSloppyHex() = True
        iEnd = iEnd + 2
        If iEnd &lt;= iLen Then 
          Do While FMT_IsHexDigit(ASC(Mid(sLine, iEnd, 1)))
            iEnd = iEnd + 1
            If iEnd &gt; iLen Then Exit do
          Loop
        End If
        Exit Function
      End If
    End If
  End If

  REM Now check for a decimal
  If iEnd &lt;= iLen Then
    If Mid(sLine, iEnd, 1) = &quot;.&quot; Then 
      iEnd = iEnd + 1
      bDecimal = True
      REM Skip trailing digits.
      Do While iEnd &lt;= iLen
        If NOT FMT_IsDigit(ASC(Mid(sLine, iEnd, 1))) Then Exit Do
        iEnd = iEnd + 1
      Loop
    End If
  End If

  REM If there was just a &quot;.&quot;, then iEnd = iPos + 1
  If (bDecimal AND iEnd = iPos + 1) OR (iEnd = iPos) Then
    FMT_FindNumberSloppyHex() = False
    Exit Function
  End If

  REM This is a number, now look for scientific notation.
  FMT_FindNumberSloppyHex() = True
  If iEnd &lt;= iLen Then
    sChar = Mid(sLine, iEnd, 1)
    If sChar &lt;&gt; &quot;f&quot; AND sChar &lt;&gt; &quot;e&quot; Then Exit Function
    iEnd = iEnd + 1
  End If

  REM This is scientific notation, so check for + or -.
  If iEnd &lt;= iLen Then sChar = Mid(sLine, iEnd, 1)
  If sChar = &quot;+&quot; OR sChar = &quot;-&quot; Then iEnd = iEnd + 1

  REM Skip leading digits.
  Do While iEnd &lt;= iLen
    If NOT FMT_IsDigit(ASC(Mid(sLine, iEnd, 1))) Then Exit Do
    iEnd = iEnd + 1
  Loop

  REM Now check for a decimal
  If iEnd &lt;= iLen Then
    If Mid(sLine, iEnd, 1) = &quot;.&quot; Then 
      iEnd = iEnd + 1
      REM Skip trailing digits.
      REM They really should be zeros if they exist.
      Do While iEnd &lt;= iLen
        If NOT FMT_IsDigit(ASC(Mid(sLine, iEnd, 1))) Then Exit Do
        iEnd = iEnd + 1
      Loop
    End If
  End If
End Function


REM This routine is called if, and only if, oCurs is on a number,
REM or a period and a number.
&apos;****************************************************************
&apos;** Determine if the cursor is on a number. If it is, then set
&apos;** iEnd to one character past the end of the number and return
&apos;** True. If not, then simply return False.
&apos;** A valid number is as follows:
&apos;** -Number may start with a digit or a decimal point.
&apos;** -Number may have a single decimal point.
&apos;** -e or f are accepted for exponentiation.
&apos;** -Exponents may start with + or -.
&apos;** -Exponents may contain a decimal point.
&apos;****************************************************************
Function FMT_FindNumberEnd(sLine$, iPos%, iLen%, iEnd%) As Boolean
  Dim sChar$
  Dim bDecimal As Boolean

  iEnd = iPos
  bDecimal = False
  sChar = &quot;&quot;
  REM Skip leading digits.
  Do While FMT_IsDigit(ASC(Mid(sLine, iEnd, 1)))
    iEnd = iEnd + 1
    If iEnd &gt; iLen Then Exit do
  Loop
  
  REM Check for hex digits such as 0xFF.
  REM No use for Basic, only for other languages. 
  REM The following must be true:
  REM -- found a single character
  REM -- more than one character to process
  REM -- the single found character must be 0
  If iEnd - iPos = 1 AND iEnd &lt; iLen AND Mid(sLine, iPos, 1) = &quot;0&quot; Then
    If Mid(sLine, iEnd, 1) = &quot;x&quot; OR Mid(sLine, iEnd, 1) = &quot;X&quot; Then
      If FMT_IsHexDigit(ASC(Mid(sLine, iEnd + 2, 1))) Then
        FMT_FindNumberEnd() = True
        iEnd = iEnd + 2
        If iEnd &lt;= iLen Then 
          Do While FMT_IsHexDigit(ASC(Mid(sLine, iEnd, 1)))
            iEnd = iEnd + 1
            If iEnd &gt; iLen Then Exit do
          Loop
        End If
        Exit Function
      End If
    End If
  End If

  REM Now check for a decimal
  If iEnd &lt;= iLen Then
    If Mid(sLine, iEnd, 1) = &quot;.&quot; Then 
      iEnd = iEnd + 1
      bDecimal = True
      REM Skip trailing digits.
      Do While iEnd &lt;= iLen
        If NOT FMT_IsDigit(ASC(Mid(sLine, iEnd, 1))) Then Exit Do
        iEnd = iEnd + 1
      Loop
    End If
  End If

  REM If there was just a &quot;.&quot;, then iEnd = iPos + 1
  If (bDecimal AND iEnd = iPos + 1) OR (iEnd = iPos) Then
    FMT_FindNumberEnd() = False
    Exit Function
  End If

  REM This is a number, now look for scientific notation.
  FMT_FindNumberEnd() = True
  If iEnd &lt;= iLen Then
    sChar = Mid(sLine, iEnd, 1)
    If sChar &lt;&gt; &quot;f&quot; AND sChar &lt;&gt; &quot;e&quot; Then Exit Function
    iEnd = iEnd + 1
  End If

  REM This is scientific notation, so check for + or -.
  If iEnd &lt;= iLen Then sChar = Mid(sLine, iEnd, 1)
  If sChar = &quot;+&quot; OR sChar = &quot;-&quot; Then iEnd = iEnd + 1

  REM Skip leading digits.
  Do While iEnd &lt;= iLen
    If NOT FMT_IsDigit(ASC(Mid(sLine, iEnd, 1))) Then Exit Do
    iEnd = iEnd + 1
  Loop

  REM Now check for a decimal
  If iEnd &lt;= iLen Then
    If Mid(sLine, iEnd, 1) = &quot;.&quot; Then 
      iEnd = iEnd + 1
      REM Skip trailing digits.
      REM They really should be zeros if they exist.
      Do While iEnd &lt;= iLen
        If NOT FMT_IsDigit(ASC(Mid(sLine, iEnd, 1))) Then Exit Do
        iEnd = iEnd + 1
      Loop
    End If
  End If
End Function

REM This routine is called if, and only if, oCurs is on a number,
REM or a period and a number.
&apos;****************************************************************
&apos;** Determine if the cursor is on a number. If it is, then set
&apos;** iEnd to one character past the end of the number and return
&apos;** True. If not, then simply return False.
&apos;** A valid number is as follows:
&apos;** -Number may start with a digit or a decimal point.
&apos;** -Number may have a single decimal point.
&apos;** -e or f are accepted for exponentiation.
&apos;** -Exponents may start with + or -.
&apos;** -Exponents may contain a decimal point.
&apos;****************************************************************
Function FMT_FindNumberEnd_Extended(sLine$, iPos%, iLen%, iEnd%, sAllowedSeparators$) As Boolean
  Dim sChar$
  Dim bDecimal As Boolean

  iEnd = iPos
  bDecimal = False
  sChar = &quot;&quot;
  FMT_FindNumberEnd_Extended() = False
  If Mid(sLine, iEnd, 1) = &quot;0&quot; Then
    iEnd = iEnd + 1
    If iEnd &gt; iLen Then
      FMT_FindNumberEnd_Extended() = True
      Exit Function
    End If

    If Mid(sLine, iEnd, 1) = &quot;b&quot; OR Mid(sLine, iEnd, 1) = &quot;x&quot; OR Mid(sLine, iEnd, 1) = &quot;o&quot;Then
      iEnd = iEnd + 1
      If iEnd &lt; iLen Then
        If Mid(sLine, iEnd-1, 1) = &quot;b&quot; Then
          REM Binary
          Do While FMT_IsBinaryDigit(ASC(Mid(sLine, iEnd, 1))) OR InStr(sAllowedSeparators, Mid(sLine, iEnd, 1)) &gt; 0
            iEnd = iEnd + 1
            If iEnd &gt; iLen Then Exit do
          Loop
        ElseIf Mid(sLine, iEnd-1, 1) = &quot;x&quot; Then
          REM Hex
          Do While FMT_IsHexDigit(ASC(Mid(sLine, iEnd, 1))) OR InStr(sAllowedSeparators, Mid(sLine, iEnd, 1)) &gt; 0
            iEnd = iEnd + 1
            If iEnd &gt; iLen Then Exit do
          Loop
        ElseIf Mid(sLine, iEnd-1, 1) = &quot;O&quot; Then
          REM Octal
          Do While FMT_IsOctDigit(ASC(Mid(sLine, iEnd, 1))) OR InStr(sAllowedSeparators, Mid(sLine, iEnd, 1)) &gt; 0
            iEnd = iEnd + 1
            If iEnd &gt; iLen Then Exit do
          Loop
        End If
      End If
      FMT_FindNumberEnd_Extended() = True
      Exit Function
    End If
  End If
  
  REM Skip leading digits.
  Do While FMT_IsDigit(ASC(Mid(sLine, iEnd, 1))) OR InStr(sAllowedSeparators, Mid(sLine, iEnd, 1))
    iEnd = iEnd + 1
    If iEnd &gt; iLen Then Exit do
  Loop
  
  REM Check for hex digits such as 0xFF.
  REM No use for Basic, only for other languages. 
  REM The following must be true:
  REM -- found a single character
  REM -- more than one character to process
  REM -- the single found character must be 0
  If iEnd - iPos = 1 AND iEnd &lt; iLen AND Mid(sLine, iPos, 1) = &quot;0&quot; Then
    If Mid(sLine, iEnd, 1) = &quot;x&quot; OR Mid(sLine, iEnd, 1) = &quot;X&quot; Then
      If FMT_IsHexDigit(ASC(Mid(sLine, iEnd + 2, 1))) Then
        FMT_FindNumberEnd_Extended() = True
        iEnd = iEnd + 2
        If iEnd &lt;= iLen Then 
          Do While FMT_IsHexDigit(ASC(Mid(sLine, iEnd, 1)))
            iEnd = iEnd + 1
            If iEnd &gt; iLen Then Exit do
          Loop
        End If
        Exit Function
      End If
    End If
  End If

  REM Now check for a decimal
  If iEnd &lt;= iLen Then
    If Mid(sLine, iEnd, 1) = &quot;.&quot; Then 
      iEnd = iEnd + 1
      bDecimal = True
      REM Skip trailing digits.
      Do While iEnd &lt;= iLen
        If NOT FMT_IsDigit(ASC(Mid(sLine, iEnd, 1))) Then Exit Do
        iEnd = iEnd + 1
      Loop
    End If
  End If

  REM Nothing found.
  If (iEnd = iPos) Then
    FMT_FindNumberEnd_Extended() = False
    Exit Function
  End If
  
  REM If there was just a &quot;.&quot; (or any other separator), then iEnd = iPos + 1
  If (iEnd = iPos + 1) AND (bDecimal OR InStr(sAllowedSeparators, Mid(sLine, iPos, 1))) Then
    FMT_FindNumberEnd_Extended() = False
    Exit Function
  End If

  REM This is a number, now look for scientific notation.
  FMT_FindNumberEnd_Extended() = True
  If iEnd &lt;= iLen Then
    sChar = Mid(sLine, iEnd, 1)
    If sChar &lt;&gt; &quot;f&quot; AND sChar &lt;&gt; &quot;e&quot; Then Exit Function
    iEnd = iEnd + 1
  End If

  REM This is scientific notation, so check for + or -.
  If iEnd &lt;= iLen Then sChar = Mid(sLine, iEnd, 1)
  If sChar = &quot;+&quot; OR sChar = &quot;-&quot; Then iEnd = iEnd + 1

  REM Skip leading digits.
  Do While iEnd &lt;= iLen
    If NOT FMT_IsDigit(ASC(Mid(sLine, iEnd, 1))) Then Exit Do
    iEnd = iEnd + 1
  Loop

  REM Now check for a decimal
  If iEnd &lt;= iLen Then
    If Mid(sLine, iEnd, 1) = &quot;.&quot; Then 
      iEnd = iEnd + 1
      REM Skip trailing digits.
      REM They really should be zeros if they exist.
      Do While iEnd &lt;= iLen
        If NOT FMT_IsDigit(ASC(Mid(sLine, iEnd, 1))) Then Exit Do
        iEnd = iEnd + 1
      Loop
    End If
  End If
End Function





&apos;****************************************************************
&apos;** Initialize the variables that contain the special characters.
&apos;****************************************************************
Sub FMT_InitSpecialCharArrays()
  Dim i As Long

  For i = LBound(bCheckWhite()) To UBound(bCheckWhite())
    bCheckWhite(i)   = False
    bCheckSpecial(i) = False
    bWordSep(i)      = False
  Next

  bCheckWhite(9)   = True
  bCheckWhite(10)  = True
  bCheckWhite(13)  = True
  bCheckWhite(32)  = True
  bCheckWhite(160) = True

  bCheckSpecial(Asc(&quot;+&quot;)) = True
  bCheckSpecial(Asc(&quot;-&quot;)) = True
  bCheckSpecial(Asc(&quot;&amp;&quot;)) = True
  bCheckSpecial(Asc(&quot;*&quot;)) = True
  bCheckSpecial(Asc(&quot;/&quot;)) = True
  bCheckSpecial(Asc(&quot;\\&quot;)) = True
  bCheckSpecial(Asc(&quot;:&quot;)) = True
  bCheckSpecial(Asc(&quot;;&quot;)) = True
  bCheckSpecial(Asc(&quot;=&quot;)) = True
  bCheckSpecial(Asc(&quot;&lt;&quot;)) = True
  bCheckSpecial(Asc(&quot;&gt;&quot;)) = True
  bCheckSpecial(Asc(&quot;(&quot;)) = True
  bCheckSpecial(Asc(&quot;)&quot;)) = True
  bCheckSpecial(Asc(&quot;{&quot;)) = True
  bCheckSpecial(Asc(&quot;}&quot;)) = True
  bCheckSpecial(Asc(&quot;[&quot;)) = True
  bCheckSpecial(Asc(&quot;]&quot;)) = True
  bCheckSpecial(Asc(&quot;,&quot;)) = True
  bCheckSpecial(Asc(&quot;#&quot;)) = True
  bCheckSpecial(Asc(&quot;@&quot;)) = True
  bCheckSpecial(Asc(&quot;!&quot;)) = True
  bCheckSpecial(Asc(&quot;^&quot;)) = True
  bCheckSpecial(Asc(&quot;%&quot;)) = True
  bCheckSpecial(Asc(&quot;_&quot;)) = True
  bCheckSpecial(Asc(&quot;$&quot;)) = True
  bCheckSpecial(Asc(&quot;|&quot;)) = True

  For i = LBound(bCheckWhite()) To UBound(bCheckWhite())
    bWordSep(i) = bCheckWhite(i) OR bCheckSpecial(i)
  Next
  bWordSep(ASC(&quot;.&quot;)) = True
  bWordSep(ASC(&quot;&quot;&quot;&quot;)) = True
  bWordSep(ASC(&quot;&apos;&quot;)) = True
End Sub

&apos;****************************************************************
&apos;** An array lookup is faster.
&apos;** This assumes that I can get an ASCII Character, which I can
&apos;** not in OOo 2.0. I can in version 2.01.
&apos;****************************************************************
Function FMT_IsWhiteSpace(iChar As Integer) As Boolean
  On Error Resume Next
  FMT_IsWhiteSpace() = False
  FMT_IsWhiteSpace() = bCheckWhite(iChar)
&apos;  Select Case iChar
&apos;  Case 9, 10, 13, 32, 160
&apos;    iIsWhiteSpace = True
&apos;  Case Else
&apos;    iIsWhiteSpace = False
&apos;  End Select  
End Function

&apos;****************************************************************
&apos;** Return true is the character is a special character.
&apos;****************************************************************
Function FMT_IsSpecialChar(iChar As Integer) As Boolean
  On Error Resume Next
  FMT_IsSpecialChar() = False
  FMT_IsSpecialChar() = bCheckSpecial(iChar)
End Function

&apos;****************************************************************
&apos;** Return true is the character is a word separator.
&apos;****************************************************************
Function FMT_IsWordSep(iChar As Integer) As Boolean
  On Error Resume Next
  FMT_IsWordSep() = False
  FMT_IsWordSep() = bWordSep(iChar)
End Function

&apos;****************************************************************
&apos;** Does this character reference the digit 0, 1, 2, ..., or 9?
&apos;****************************************************************
Function FMT_IsDigit(iChar As Integer) As Boolean
  FMT_IsDigit() = (48 &lt;= iChar AND iChar &lt;= 57)
End Function

&apos;****************************************************************
&apos;** Does this character reference a binary digit 0 or 1.
&apos;****************************************************************
Function FMT_IsBinaryDigit(iChar As Integer) As Boolean
  FMT_IsBinaryDigit() = (48 &lt;= iChar AND iChar &lt;= 49)
End Function


&apos;****************************************************************
&apos;** Does this character reference an octal digit 0 through 7.
&apos;****************************************************************
Function FMT_IsOctDigit(iChar As Integer) As Boolean
  FMT_IsOctDigit() = (48 &lt;= iChar AND iChar &lt;= 55)
End Function

&apos;****************************************************************
&apos;** Does this character reference a hex digit
&apos;****************************************************************
Function FMT_IsHexDigit(iChar As Integer) As Boolean
  FMT_IsHexDigit() = FMT_IsDigit(iChar) OR _
                    (65 &lt;= iChar AND iChar &lt;= 70) OR _
                    (97 &lt;= iChar AND iChar &lt;= 102)
End Function

&apos;****************************************************************
&apos;** Does this character reference the digit 0, 1, 2, ..., or 9?
&apos;****************************************************************
Function FMT_StrIsDigit(s$) As Boolean
  FMT_StrIsDigit = FMT_IsDigit(ASC(s))
End Function

&apos;****************************************************************
&apos;** This code is permissive, and assumes valid XML.
&apos;****************************************************************
Function FMT_XMLElmentEnd(s$, iStart%, iLen%) As Integer
  Dim i%
  Dim sChar$
  For i = iStart To iLen
    sChar$ = Mid(s, i, 1)
    If FMT_IsWhiteSpace(Asc(sChar)) OR sChar = &quot;=&quot; OR sChar = &quot;/&quot; OR sChar = &quot;&gt;&quot; Then
      FMT_XMLElmentEnd = i - 1
      Exit Function
    End If
  Next
  FMT_XMLElmentEnd = iLen
End Function


Function FMT_StrEndsWith(s$, sEnd$) As Boolean
  On Error Resume Next
  FMT_StrEndsWith() = False
  FMT_StrEndsWith() = (Right(s, Len(sEnd)) = sEnd)
End Function
</script:module>