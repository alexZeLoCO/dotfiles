<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="R" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Sub MainR
  FMT_MasterColorizer(ThisComponent, &quot;R&quot;, &quot;CUR&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;R&quot;, &quot;SEL&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;R&quot;, &quot;DOC&quot;)
End Sub

Sub FMT_ColorCodeCurrentR()
  FMT_MasterColorizer(ThisComponent, &quot;R&quot;, &quot;CUR&quot;)
End Sub

REM Format just the selected text
Sub HighlightSelR()
  FMT_MasterColorizer(ThisComponent, &quot;R&quot;, &quot;SEL&quot;)
End Sub


&apos;****************************************************************
&apos;** Very simple parsing of R code.
&apos;****************************************************************
Sub FMT_ColorCodeOneRangeStringR(oSel, sTokens(), sAltTokens(), sCharStyles())
  &apos; Which language is closest to R? Use that parser. 
  &apos; You likely only require something close enough (if you know what I mean).
  &apos; For example, understanding that a new line has started ususlly does not matter.
  &apos; Code to handle multi-line comments, however, is usually language specific. 
  &apos; In this case, the &quot;#&quot; character should be recognized as a single line comment.
  &apos; Also, I have never bothered to support inline escape charcters either, other than
  &apos; to not have a problem with &quot;\&quot;&quot; representing a string with a double quote character.
  &apos; So, do not bother trying to handle syntax errors, just happily color code based on minimal 
  &apos; information.
  Dim oCurs    &apos;Iterate paragraphs in the selected region.
  Dim oTCurs   &apos;Iterate the characters in a paragraph.
  Dim oText    &apos;Text object containing the selection.
  Dim iPos%
  Dim iLen%
  Dim i%       &apos;Temporary integer variable.
  Dim sChar$   &apos;Current character
  Dim sLine$   &apos;Current line (in lower case).
  Dim bComment As Boolean
  Dim bIsAsterick As Boolean

  REM We are not currently processing a comment.
  bComment = False
  REM Position oTCurs at the start of the selection.
  oText = oSel.getText()
  oTCurs = oText.createTextCursorByRange(oSel.getStart())
  oTCurs.goRight(0, False)

  REM oCurs contains the first paragraph.
  oCurs = FMT_CreateStartCursor(oText, oSel)

  Do While oText.compareRegionEnds(oCurs, oSel) &gt;= 0
    REM Now, process a single line of text!
    REM oCurs has selected the entire paragraph.
    REM oTCurs is at the start of the paragraph.
    sLine = LCase(oCurs.getString())
    iLen = Len(sLine)
    iPos = 1
    Do While iPos &lt;= iLen
      REM Skip leading white space.
      FMT_FindNextNonSpace(sLine, iPos%, iLen%)
      If iPos &gt; iLen Then Exit Do
      sChar = Mid(sLine, iPos, 1)

      REM Is the cursor in a multi-line comment?
      If bComment Then
        &apos;It looks like R does NOT support multi-line comments, so, this will not be used.
      ElseIf sChar = &quot;#&quot; Then
        Rem Found a comment, mark the rest of the line.
        REM Move the character cursor from the paragraph start
        REM to the comment character.
        REM Select the rest of the paragraph.
        oTCurs.goRight(iPos-1, False)
        oTCurs.gotoEndOfParagraph(True)
        &apos;Print &quot;Setting (&quot; &amp; oTCurs.getString() &amp; &quot;)&quot;
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Comment)
        iPos = iLen + 1
      ElseIf sChar = &quot;&quot;&quot;&quot; OR sChar = &quot;&apos;&quot; Then
        REM Move to the first double quote
        oTCurs.goRight(iPos-1, False)

        REM Remember the location of the first double quote
        REM and then find then end of the quoted text.
        i = iPos
        FMT_FindEndQuoteEscape(sLine$, iPos%, iLen%)

        REM Move the cursor to the closing double quote.
        REM Set the character style for the string.
        REM Move the cursor back to the start of the paragraph.
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Literal)
        oTCurs.gotoRange(oCurs.start, False)
      ElseIf FMT_FindNumberEnd(sLine, iPos, iLen, i) Then
        REM Move to the number start.
        oTCurs.goRight(iPos-1, False)
        oTCurs.goRight(i - iPos, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Literal)
        oTCurs.gotoRange(oCurs.start, False)
        iPos = i
      ElseIf sChar = &quot;.&quot; OR FMT_IsSpecialChar(ASC(sChar)) Then
        i = iPos
        oTCurs.goRight(iPos - 1, False)

        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then Exit Do
        Loop Until NOT FMT_IsSpecialChar(ASC(Mid(sLine, iPos, 1)))
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Special)
        oTCurs.gotoRange(oCurs.start, False)
      Else
        REM No special characters, so this is a variable 
        REM or logic statement. Move to the first character.
        i = iPos
        oTCurs.goRight(iPos-1, False)
        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then 
            Exit Do
          End If
        Loop Until FMT_IsWordSep(Asc(Mid(sLine, iPos, 1)))

        oTCurs.goRight(iPos - i, True)
        sChar = LCase(oTCurs.getString())

        If FMT_ArrayHasString(sChar, sTokens()) Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
        ElseIf FMT_ArrayHasString(sChar, sAltTokens()) Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_AltWord)
        Else
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Ident)
        End If

        oTCurs.gotoRange(oCurs.start, False)
      End If
    Loop
    If Not oCurs.gotoNextParagraph(False) Then Exit Do
    oTCurs.gotoRange(oCurs, False)
    If NOT FMT_CursorToParEnd(oText, oSel, oCurs) Then Exit Do
  Loop
End Sub


&apos;****************************************************************
&apos;** Tokens recognized by R.
&apos;****************************************************************
Sub FMT_InitTokensR(sTokens())
  sTokens() = Array(&quot;getwd&quot;, &quot;setwd&quot;, &quot;list.files&quot;, &quot;read.table&quot;, &quot;objects&quot;, &quot;rm&quot;, &quot;ls&quot;, &quot;attributes&quot;, _
             &quot;summary&quot;, &quot;class&quot;, &quot;dim&quot;, &quot;levels&quot;, &quot;ifelse&quot;, &quot;methods&quot;, &quot;arrows&quot;, &quot;points&quot;, &quot;box&quot;, _
             &quot;text&quot;, &quot;axis&quot;, &quot;for&quot;, &quot;print&quot;, &quot;help&quot;, &quot;in&quot;, &quot;dyn.load&quot;, &quot;is.loaded&quot;, &quot;if&quot;, &quot;while&quot;,_
              &quot;return&quot;, &quot;function&quot;, &quot;plot&quot;, &quot;hist&quot;, &quot;boxplot&quot;, &quot;read&quot;, &quot;table&quot;, &quot;scan&quot;, &quot;kw2&quot;, _
              &quot;specific words&quot;, &quot;greenT&quot;, &quot;f&quot;, &quot;true&quot;, &quot;false&quot;, &quot;kw3&quot;, &quot;functions&quot;, &quot;redquantile&quot;,_
               &quot;cut&quot;, &quot;matrix&quot;, &quot;dim&quot;, &quot;cbind&quot;, &quot;rbind&quot;, &quot;apply&quot;, &quot;rnorm&quot;, &quot;extractAIC&quot;, &quot;dyn&quot;, _
               &quot;load&quot;, &quot;is&quot;, &quot;loaded&quot;, &quot;length&quot;, &quot;t&quot;, &quot;outer&quot;, &quot;sum&quot;, &quot;diag&quot;, &quot;solve&quot;, &quot;det&quot;, _
               &quot;list&quot;, &quot;names&quot;, &quot;rep&quot;, &quot;mean&quot;, &quot;eigen&quot;, &quot;sqrt&quot;, &quot;runif&quot;, &quot;median&quot;, &quot;range&quot;, _
               &quot;max&quot;, &quot;min&quot;, &quot;summary&quot;, &quot;rpois&quot;, &quot;pnorm&quot;, &quot;qnorm&quot;, &quot;pchisq&quot;, &quot;seq&quot;, &quot;dnorm&quot;, _
               &quot;step&quot;, &quot;attach&quot;, &quot;names&quot;, &quot;header&quot;, &quot;package&quot;, &quot;sep&quot;, &quot;breaks&quot;, &quot;probs&quot;, _
               &quot;data&quot;, &quot;bty&quot;, &quot;axes&quot;, &quot;pch&quot;, &quot;cex&quot;, &quot;angle&quot;, &quot;labels&quot;, &quot;FUN&quot;, &quot;ncol&quot;, _
               &quot;byrow&quot;, &quot;type&quot;, &quot;pch&quot;, &quot;col&quot;, &quot;lwd&quot;, &quot;row&quot;, &quot;xlab&quot;, &quot;ylab&quot;, &quot;ask&quot;, &quot;mfrow&quot;, _
               &quot;direction&quot;, &quot;call&quot;, &quot;aliased&quot;, &quot;adj.r.squared&quot;, &quot;terms&quot;, &quot;sigma&quot;, &quot;fstatistic&quot;, _
               &quot;residuals&quot;, &quot;df&quot;, &quot;cov.unscaled&quot;, &quot;coefficients&quot;, &quot;r.squared&quot;, &quot;fitted.values&quot;, _
               &quot;xlevels&quot;, &quot;assign&quot;, &quot;call&quot;, &quot;effects&quot;, &quot;qr&quot;, &quot;rank&quot;, &quot;df.residual&quot;, &quot;model&quot;, _
               &quot;nclass&quot;)
  FMT_SortStringArrayAscending(sTokens())
End Sub

&apos;****************************************************************
&apos;** Alternate Tokens such as system class libraries and functions
&apos;** that you want to recognize.
&apos;****************************************************************
Sub FMT_InitAltTokensR(sAltTokens())
  sAltTokens() = Array()
  FMT_SortStringArrayAscending(sAltTokens())
End Sub

&apos;****************************************************************
&apos;** Get the character styles meant for highlighting R code.
&apos;** R formats character styles as an identifier.
&apos;****************************************************************
Function FMT_GetRCharacterStyles()
  FMT_GetRCharacterStyles() = FMT_GetBasicCharacterStyles()
End Function

</script:module>