<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Bash" script:language="StarBasic">REM  *****  BASIC  *****
OPTION Explicit

REM Author: Andrew D. Pitonyak
REM Date: February 26, 2014
REM License: Public Domain

Sub MainBash
  FMT_MasterColorizer(ThisComponent, &quot;Bash&quot;, &quot;CUR&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;Bash&quot;, &quot;DOC&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;Bash&quot;, &quot;SEL&quot;)
End Sub

&apos;****************************************************************
&apos;** Color code the Bash code surrounding the view cursor.
&apos;****************************************************************
Sub FMT_ColorCodeCurrentBash()
  FMT_MasterColorizer(ThisComponent, &quot;Bash&quot;, &quot;CUR&quot;)
End Sub

REM Highlight all code in this document.
Sub HighlightDocBash()
  FMT_MasterColorizer(ThisComponent, &quot;Bash&quot;, &quot;DOC&quot;)

End Sub

REM Format just the selected text
Sub HighlightSelBash()
  FMT_MasterColorizer(ThisComponent, &quot;Bash&quot;, &quot;SEL&quot;)
End Sub

&apos;****************************************************************
&apos;** Color code the Bash code in the oSel range.
&apos;** Use the keywords in the sTokens() array.
&apos;****************************************************************
Sub FMT_ColorCodeOneRangeStringBash(oSel, sTokens(), sAltTokens(), sCharStyles(), sCommentStart$)
  Dim oCurs    &apos;Iterate paragraphs in the selected region.
  Dim oTCurs   &apos;Iterate the characters in a paragraph.
  Dim oText    &apos;Text object containing the selection.
  Dim iPos%
  Dim iLen%
  Dim i%       &apos;Temporary integer variable.
  Dim sChar$   &apos;Current character
  Dim sLine$   &apos;Current line (in lower case).

  REM Position oTCurs at the start of the selection.
  oText = oSel.getText()
  oTCurs = oText.createTextCursorByRange(oSel.getStart())
  oTCurs.goRight(0, False)

  REM oCurs contains the first paragraph, but not more than oSel.
  oCurs = FMT_CreateStartCursor(oText, oSel)

  REM Verify that oCurs ends before (or at the same place)
  REM as oSel.
  Do While oText.compareRegionEnds(oCurs, oSel) &gt;= 0
    REM Now, process a single line of text!
    REM oCurs has selected the entire paragraph.
    REM oTCurs is at the start of the paragraph.
    sLine = LCase(oCurs.getString())
    iLen = Len(sLine)
    iPos = 1
    Do While iPos &lt;= iLen
      REM Skip leading white space.
      FMT_FindNextNonSpace(sLine, iPos%, iLen%)
      If iPos &gt; iLen Then Exit Do

      sChar = Mid(sLine, iPos, 1)
      If sChar = sCommentStart Then
        Rem Found a comment, mark the rest of the line.
        REM Move the character cursor from the paragraph start
        REM to the single quote character.
        REM Select the rest of the paragraph.
        oTCurs.goRight(iPos-1, False)
        oTCurs.gotoEndOfParagraph(True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Comment)
        iPos = iLen + 1
      ElseIf sChar = &quot;&quot;&quot;&quot; OR sChar = &quot;&apos;&quot; Then
        REM Move to the first quote
        oTCurs.goRight(iPos-1, False)

        REM Remember the location of the first double quote
        REM and then find then end of the quoted text.
        i = iPos
        FMT_FindEndQuoteEscape(sLine$, iPos%, iLen%)

        REM Move the cursor to the closing quote.
        REM Set the character style for the string.
        REM Move the cursor back to the start of the paragraph.
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Literal)
        oTCurs.gotoRange(oCurs.start, False)
      ElseIf FMT_FindNumberEnd(sLine, iPos, iLen, i) Then
        REM Move to the number start.
        oTCurs.goRight(iPos-1, False)
        oTCurs.goRight(i - iPos, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Number)
        oTCurs.gotoRange(oCurs.start, False)
        iPos = i
      ElseIf sChar = &quot;.&quot; OR FMT_IsSpecialChar(ASC(sChar)) Then
        i = iPos
        oTCurs.goRight(iPos - 1, False)

        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then Exit Do
        Loop Until NOT FMT_IsSpecialChar(ASC(Mid(sLine, iPos, 1)))
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Special)
        oTCurs.gotoRange(oCurs.start, False)
&apos;      ElseIf sChar = &quot;_&quot; AND iPos = iLen Then
&apos;        REM An Identifier can start with an &quot;_&quot; (I think).
&apos;        REM It is likely that trailing spaces will be in a text
&apos;        REM document, but we will ignore these for now!
&apos;        oTCurs.goRight(iPos-1, False)
&apos;        oTCurs.goRight(1, True)
&apos;        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
&apos;        oTCurs.gotoRange(oCurs.start, False)
&apos;        iPos = iPos + 1
      Else
        REM No special characters, so this is a variable 
        REM or logic statement. Move to the first character.
        i = iPos
        oTCurs.goRight(iPos-1, False)
        
        REM We can either loop until we find a &quot;word separator&quot;,
        REM or just loop until we find the first special character.
        &apos;Do
        &apos;  iPos = iPos + 1
        &apos;  If iPos &gt; iLen Then Exit Do
        &apos;Loop Until FMT_IsWordSep(Asc(Mid(sLine, iPos, 1)))
        
        REM Loop until we find a character that is white space or special.
        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then Exit Do
        Loop Until FMT_IsSpecialChar(ASC(Mid(sLine, iPos, 1))) OR FMT_IsWhiteSpace(ASC(Mid(sLine, iPos, 1)))

        oTCurs.goRight(iPos - i, True)
        sChar = LCase(oTCurs.getString())

        If FMT_ArrayHasString(sChar, sTokens()) Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
        ElseIf FMT_ArrayHasString(sChar, sAltTokens()) Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_AltWord)
        Else
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Ident)
        End If

        oTCurs.gotoRange(oCurs.start, False)
      End If
    Loop
    If Not oCurs.gotoNextParagraph(False) Then Exit Do
    oTCurs.gotoRange(oCurs, False)
    If NOT FMT_CursorToParEnd(oText, oSel, oCurs) Then Exit Do
  Loop
End Sub

&apos;****************************************************************
&apos;** The following words are reserved words in BASH
&apos;****************************************************************
Sub FMT_InitTokensBash(sTokens())
  sTokens() = Array(&quot;case&quot;, &quot;do&quot;, &quot;done&quot;, &quot;elif&quot;, &quot;else&quot;, &quot;esac&quot;, &quot;fi&quot;, _
                    &quot;for&quot;, &quot;function&quot;, &quot;if&quot;, &quot;in&quot;, &quot;select&quot;, &quot;then&quot;, _
                    &quot;time&quot;, &quot;until&quot;, &quot;while&quot;)
  FMT_SortStringArrayAscending(sTokens())
End Sub

&apos;****************************************************************
&apos;** The following words alternate keywords, which generally means external commands.
&apos;****************************************************************
Sub FMT_InitAltTokensBash(sAltTokens())
  sAltTokens() = Array(&quot;alias&quot;, &quot;apropos&quot;, &quot;apt&quot;, &quot;aptitude&quot;, &quot;aspell&quot;, &quot;awk&quot;, _
  &quot;basename&quot;, &quot;bash&quot;, &quot;bc&quot;, &quot;bg&quot;, &quot;break&quot;, &quot;builtin&quot;, &quot;bzip2&quot;, _
  &quot;cal&quot;, &quot;cat&quot;, &quot;cd&quot;, &quot;cfdisk&quot;, &quot;chgrp&quot;, &quot;chmod&quot;, &quot;chown&quot;, &quot;chroot&quot;,  _
  &quot;chkconfig&quot;, &quot;cksum&quot;, &quot;clear&quot;, &quot;cmp&quot;, &quot;comm&quot;, &quot;command&quot;, &quot;continue&quot;, _
  &quot;cp&quot;, &quot;cron&quot;, &quot;crontab&quot;, &quot;csplit&quot;, &quot;cut&quot;, _
  &quot;date&quot;, &quot;dc&quot;, &quot;dd&quot;, &quot;ddrescue&quot;, &quot;declare&quot;, &quot;df&quot;, &quot;diff&quot;, &quot;diff3&quot;, &quot;dig&quot;, _
  &quot;dir&quot;, &quot;dircolors&quot;, &quot;dirname&quot;, &quot;dirs&quot;, &quot;dmesg&quot;, &quot;du&quot;, _
  &quot;echo&quot;, &quot;egrep&quot;, &quot;eject&quot;, &quot;enable&quot;, &quot;env&quot;, &quot;ethtool&quot;, &quot;eval&quot;, &quot;exec&quot;, _
  &quot;exit&quot;, &quot;expect&quot;, &quot;expand&quot;, &quot;export&quot;, &quot;expr&quot;, _
  &quot;false&quot;, &quot;fdformat&quot;, &quot;fdisk&quot;, &quot;fg&quot;, &quot;fgrep&quot;, &quot;file&quot;, &quot;find&quot;, &quot;fmt&quot;,_
   &quot;fold&quot;, &quot;for&quot;, &quot;format&quot;, &quot;free&quot;, &quot;fsck&quot;, &quot;ftp&quot;, &quot;function&quot;, &quot;fuser&quot;, _
  &quot;gawk&quot;, &quot;getopts&quot;, &quot;grep&quot;, &quot;groupadd&quot;, &quot;groupdel&quot;, &quot;groupmod&quot;, &quot;groups&quot;, &quot;gzip&quot;, _
  &quot;hash&quot;, &quot;head&quot;, &quot;help&quot;, &quot;history&quot;, &quot;hostname&quot;, _
  &quot;iconv&quot;, &quot;id&quot;, &quot;if&quot;, &quot;ifconfig&quot;, &quot;ifdown&quot;, &quot;ifup&quot;, &quot;import&quot;, &quot;install&quot;, _
  &quot;jobs&quot;, &quot;join&quot;, _
  &quot;kill&quot;, &quot;killall&quot;, _
  &quot;less&quot;, &quot;let&quot;, &quot;link&quot;, &quot;ln&quot;, &quot;local&quot;, &quot;locate&quot;, &quot;logname&quot;, &quot;logout&quot;, &quot;look&quot;, _
  &quot;lpc&quot;, &quot;lpr&quot;, &quot;lprint&quot;, &quot;lprintd&quot;, &quot;lprintq&quot;, &quot;lprm&quot;, &quot;ls&quot;, &quot;lsof&quot;, _
  &quot;make&quot;, &quot;man&quot;, &quot;mkdir&quot;, &quot;mkfifo&quot;, &quot;mkisofs&quot;, &quot;mknod&quot;, &quot;more&quot;, &quot;most&quot;, &quot;mount&quot;, _
  &quot;mtools&quot;, &quot;mtr&quot;, &quot;mv&quot;, &quot;mmv&quot;, _
  &quot;netstat&quot;, &quot;nice&quot;, &quot;nl&quot;, &quot;nohup&quot;, &quot;notify&quot;, &quot;nslookup&quot;, &quot;open&quot;, &quot;op&quot;, _
  &quot;passwd&quot;, &quot;paste&quot;, &quot;pathchk&quot;, &quot;ping&quot;, &quot;pkill&quot;, &quot;popd&quot;, &quot;pr&quot;, &quot;printcap&quot;, _
  &quot;printenv&quot;, &quot;printf&quot;, &quot;ps&quot;, &quot;pushd&quot;, &quot;pv&quot;, &quot;pwd&quot;, _
  &quot;quota&quot;, &quot;quotacheck&quot;, &quot;quotactl&quot;, _
  &quot;ram&quot;, &quot;rcp&quot;, &quot;read&quot;, &quot;readarray&quot;, &quot;readonly&quot;, &quot;reboot&quot;, &quot;rename&quot;, _
  &quot;renice&quot;, &quot;remsync&quot;, &quot;return&quot;, &quot;rev&quot;, &quot;rm&quot;, &quot;rmdir&quot;, &quot;rsync&quot;, _
  &quot;screen&quot;, &quot;scp&quot;, &quot;sdiff&quot;, &quot;sed&quot;, &quot;seq&quot;, &quot;set&quot;, &quot;sftp&quot;, &quot;shift&quot;, &quot;shopt&quot;, _
  &quot;shutdown&quot;, &quot;sleep&quot;, &quot;slocate&quot;, &quot;sort&quot;, &quot;source&quot;, &quot;split&quot;, &quot;ssh&quot;, &quot;stat&quot;, _
  &quot;strace&quot;, &quot;su&quot;, &quot;sudo&quot;, &quot;sum&quot;, &quot;suspend&quot;, &quot;sync&quot;, _
  &quot;tail&quot;, &quot;tar&quot;, &quot;tee&quot;, &quot;test&quot;, &quot;timeout&quot;, &quot;times&quot;, &quot;touch&quot;, _
  &quot;top&quot;, &quot;traceroute&quot;, &quot;trap&quot;, &quot;tr&quot;, &quot;true&quot;, &quot;tsort&quot;, &quot;tty&quot;, &quot;type&quot;, _
  &quot;ulimit&quot;, &quot;umask&quot;, &quot;umount&quot;, &quot;unalias&quot;, &quot;uname&quot;, &quot;unexpand&quot;, &quot;uniq&quot;, _
  &quot;units&quot;, &quot;unset&quot;, &quot;unshar&quot;, &quot;uptime&quot;, &quot;useradd&quot;, &quot;userdel&quot;, _
  &quot;usermod&quot;, &quot;users&quot;, &quot;uuencode&quot;, &quot;uudecode&quot;, _
  &quot;v&quot;, &quot;vdir&quot;, &quot;vi&quot;, &quot;vmstat&quot;, _
  &quot;wait&quot;, &quot;watch&quot;, &quot;wc&quot;, &quot;whereis&quot;, &quot;which&quot;, &quot;who&quot;, &quot;whoami&quot;, &quot;wget&quot;, &quot;write&quot;, _
  &quot;xargs&quot;, &quot;xdg&quot;, &quot;yes&quot;, &quot;zip&quot;)
  FMT_SortStringArrayAscending(sAltTokens())
End Sub


&apos;****************************************************************
&apos;** Get the character styles for Bash
&apos;** Special characters are formatted as a keyword.
&apos;****************************************************************
Function FMT_GetBashCharacterStyles()
  CreateBashCharStyles()
  FMT_GetBashCharacterStyles() = Array( &quot;_BashComment&quot;, _
      &quot;_BashLiteral&quot;, &quot;_BashKeyWord&quot;, _
      &quot;_BashIdent&quot;, &quot;_BashSpecial&quot;, &quot;_BashNumber&quot;, &quot;_BashAltKeyword&quot;)
End Function


</script:module>