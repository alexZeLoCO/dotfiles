<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Rust" script:language="StarBasic" script:moduleType="normal">REM  *****  BASIC  *****
Option Explicit

REM Author: Andrew D. Pitonyak
REM Date: September 30, 2020
REM License: Public Domain
REM I appreciate knowing about changes:

Sub MainRust
  FMT_MasterColorizer(ThisComponent, &quot;Rust&quot;, &quot;CUR&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;Rust&quot;, &quot;SEL&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;Rust&quot;, &quot;DOC&quot;)
End Sub

Sub FMT_ColorCodeCurrentRust()
  FMT_MasterColorizer(ThisComponent, &quot;Rust&quot;, &quot;CUR&quot;)
End Sub

REM Format just the selected text
Sub HighlightSelRust()
  FMT_MasterColorizer(ThisComponent, &quot;Rust&quot;, &quot;SEL&quot;)
End Sub

&apos;****************************************************************
&apos;** Very simple parsing of C++ code.
&apos;****************************************************************
Sub FMT_ColorCodeOneRangeStringRust(oSel, sTokens(), sAltTokens(), sCharStyles())
  Dim oCurs    &apos;Iterate paragraphs in the selected region.
  Dim oTCurs   &apos;Iterate the characters in a paragraph.
  Dim oText    &apos;Text object containing the selection.
  Dim iPos%
  Dim iLen%
  Dim i%       &apos;Temporary integer variable.
  Dim sChar$   &apos;Current character
  Dim sLine$   &apos;Current line (in lower case).

  REM Position oTCurs at the start of the selection.
  oText = oSel.getText()
  oTCurs = oText.createTextCursorByRange(oSel.getStart())
  oTCurs.goRight(0, False)

  REM oCurs contains the first paragraph.
  oCurs = FMT_CreateStartCursor(oText, oSel)

  Do While oText.compareRegionEnds(oCurs, oSel) &gt;= 0
    REM Now, process a single line of text!
    REM oCurs has selected the entire paragraph.
    REM oTCurs is at the start of the paragraph.
    sLine = LCase(oCurs.getString())
    iLen = Len(sLine)
    iPos = 1
    Do While iPos &lt;= iLen
      REM Skip leading white space.
      FMT_FindNextNonSpace(sLine, iPos%, iLen%)
      If iPos &gt; iLen Then Exit Do
      sChar = Mid(sLine, iPos, 1)

      If sChar = &quot;/&quot; AND iPos &lt; iLen Then
        Rem Might be a comment.
        If Mid(sLine, iPos+1, 1) = &quot;/&quot; Then
          REM This starts a single line comment.
          oTCurs.goRight(iPos-1, False)
          oTCurs.gotoEndOfParagraph(True)
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Comment)
          iPos = iLen + 1
        Else
          REM This is not a comment.
          oTCurs.goRight(iPos-1, False)
          oTCurs.gotoEndOfParagraph(True)
          &apos;oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Ident)
          iPos = iPos + 1
        End If
      ElseIf sChar = &quot;&quot;&quot;&quot; OR sChar = &quot;&apos;&quot; Then
        REM Move to the first double quote
        oTCurs.goRight(iPos-1, False)

        REM Remember the location of the first double quote
        REM and then find then end of the quoted text.
        i = iPos
        FMT_FindEndQuoteEscape(sLine$, iPos%, iLen%)

        REM Move the cursor to the closing double quote.
        REM Set the character style for the string.
        REM Move the cursor back to the start of the paragraph.
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Literal)
        oTCurs.gotoRange(oCurs.start, False)
      ElseIf FMT_FindNumberEnd_Extended(sLine, iPos, iLen, i, &quot;&quot;) Then
        REM Move to the number start.
        oTCurs.goRight(iPos-1, False)
        oTCurs.goRight(i - iPos, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Literal)
        oTCurs.gotoRange(oCurs.start, False)
        iPos = i
      ElseIf sChar = &quot;.&quot; OR FMT_IsSpecialChar(ASC(sChar)) Then
        i = iPos
        oTCurs.goRight(iPos - 1, False)

        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then Exit Do
        Loop Until NOT FMT_IsSpecialChar(ASC(Mid(sLine, iPos, 1)))
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Special)
        oTCurs.gotoRange(oCurs.start, False)
      Else
        REM No special characters, so this is a variable 
        REM or logic statement. Move to the first character.
        i = iPos
        oTCurs.goRight(iPos-1, False)
        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then 
            Exit Do
          End If
        Loop Until FMT_IsWordSep(Asc(Mid(sLine, iPos, 1)))
        oTCurs.goRight(iPos - i, True)
        sChar = LCase(oTCurs.getString())

        If FMT_ArrayHasString(sChar, sTokens()) Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
        ElseIf FMT_ArrayHasString(sChar, sAltTokens()) Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_AltWord)
        Else
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Ident)
        End If

        oTCurs.gotoRange(oCurs.start, False)
      End If
    Loop
    If Not oCurs.gotoNextParagraph(False) Then Exit Do
    oTCurs.gotoRange(oCurs, False)
    If NOT FMT_CursorToParEnd(oText, oSel, oCurs) Then Exit Do
  Loop
End Sub

&apos;****************************************************************
&apos;** Tokens recognized by c++
&apos;****************************************************************
Sub FMT_InitTokensRust(sTokens())
  sTokens() = Array(&quot;abstract&quot;, &quot;as&quot;, &quot;async&quot;, &quot;await&quot;, &quot;become&quot;, &quot;box&quot;, _
    &quot;break&quot;, &quot;const&quot;, &quot;continue&quot;, &quot;crate&quot;, &quot;do&quot;, &quot;dyn&quot;, _
    &quot;else&quot;, &quot;enum&quot;, &quot;extern&quot;, &quot;false&quot;, &quot;final&quot;, &quot;fn&quot;, _
    &quot;for&quot;, &quot;if&quot;, &quot;impl&quot;, &quot;in&quot;, &quot;let&quot;, &quot;loop&quot;, _
    &quot;macro&quot;, &quot;match&quot;, &quot;mod&quot;, &quot;move&quot;, &quot;mut&quot;, &quot;override&quot;, _
    &quot;priv&quot;, &quot;pub&quot;, &quot;ref&quot;, &quot;return&quot;, &quot;Self&quot;, &quot;self&quot;, _
    &quot;static&quot;, &quot;struct&quot;, &quot;super&quot;, &quot;trait&quot;, &quot;true&quot;, &quot;try&quot;, _
    &quot;type&quot;, &quot;typeof&quot;, &quot;union&quot;, &quot;unsafe&quot;, &quot;unsized&quot;, &quot;use&quot;, _
    &quot;virtual&quot;, &quot;where&quot;, &quot;while&quot;, &quot;yield&quot; )
  FMT_SortStringArrayAscending(sTokens())
End Sub

&apos;****************************************************************
&apos;** Alternate Tokens such as system class libraries and functions
&apos;** that you want to recognize.
&apos;****************************************************************
Sub FMT_InitAltTokensRust(sAltTokens())
  sAltTokens() = Array()
  FMT_SortStringArrayAscending(sAltTokens())
End Sub

&apos;****************************************************************
&apos;** Get the character styles meant for highlighting Rust code.
&apos;** Format special characters with the Base color.
&apos;****************************************************************
Function FMT_GetRustCharacterStyles()
  FMT_GetRustCharacterStyles() = FMT_GetBasicCharacterStyles()
End Function

</script:module>