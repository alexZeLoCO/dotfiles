<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Basic" script:language="StarBasic">REM  *****  BASIC  *****
OPTION Explicit

REM Author: Andrew D. Pitonyak
REM Date: February 26, 2014
REM License: Public Domain

REM Character Style Name Index
REM An AltWord allows a distinction between two sets of keywords.
REM AltWord will probably be used for things such as BASH shell and such.
Public const FMT_CSNI_Comment = 0
Public const FMT_CSNI_Literal = 1
Public const FMT_CSNI_KeyWord = 2
Public const FMT_CSNI_Ident   = 3
Public const FMT_CSNI_Special = 4
Public const FMT_CSNI_Number  = 5
Public Const FMT_CSNI_AltWord = 6


Sub MainBasic
  FMT_MasterColorizer(ThisComponent, &quot;BASIC&quot;, &quot;CUR&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;BASIC&quot;, &quot;DOC&quot;)
  &apos;FMT_MasterColorizer(ThisComponent, &quot;BASIC&quot;, &quot;SEL&quot;)
End Sub

&apos;****************************************************************
&apos;** Color code the Basic code surrounding the view cursor.
&apos;****************************************************************
Sub FMT_ColorCodeCurrentBasic()
  FMT_MasterColorizer(ThisComponent, &quot;BASIC&quot;, &quot;CUR&quot;)
End Sub

REM Highlight all code in this document.
Sub HighlightDocBasic()
  FMT_MasterColorizer(ThisComponent, &quot;BASIC&quot;, &quot;DOC&quot;)

End Sub

REM Format just the selected text
Sub HighlightSelBasic()
  FMT_MasterColorizer(ThisComponent, &quot;BASIC&quot;, &quot;SEL&quot;)
End Sub

&apos;****************************************************************
&apos;** Color code the Basic code in the oSel range.
&apos;** Use the keywords in the sTokens() array.
&apos;****************************************************************
Sub FMT_ColorCodeOneRangeStringBasic(oSel, sTokens(), sAltTokens(), sCharStyles())
  Dim oCurs    &apos;Iterate paragraphs in the selected region.
  Dim oTCurs   &apos;Iterate the characters in a paragraph.
  Dim oText    &apos;Text object containing the selection.
  Dim iPos%
  Dim iLen%
  Dim i%       &apos;Temporary integer variable.
  Dim sChar$   &apos;Current character
  Dim sLine$   &apos;Current line (in lower case).

  REM Position oTCurs at the start of the selection.
  oText = oSel.getText()
  oTCurs = oText.createTextCursorByRange(oSel.getStart())
  oTCurs.goRight(0, False)

  REM oCurs contains the first paragraph, but not more than oSel.
  oCurs = FMT_CreateStartCursor(oText, oSel)

  REM Verify that oCurs ends before (or at the same place)
  REM as oSel.
  Do While oText.compareRegionEnds(oCurs, oSel) &gt;= 0
    REM Now, process a single line of text!
    REM oCurs has selected the entire paragraph.
    REM oTCurs is at the start of the paragraph.
    sLine = LCase(oCurs.getString())
    iLen = Len(sLine)
    iPos = 1
    Do While iPos &lt;= iLen
      REM Skip leading white space.
      FMT_FindNextNonSpace(sLine, iPos%, iLen%)
      If iPos &gt; iLen Then Exit Do

      sChar = Mid(sLine, iPos, 1)
      If sChar = &quot;&apos;&quot; Then
        Rem Found a comment, mark the rest of the line.
        REM Move the character cursor from the paragraph start
        REM to the single quote character.
        REM Select the rest of the paragraph.
        oTCurs.goRight(iPos-1, False)
        oTCurs.gotoEndOfParagraph(True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Comment)
        iPos = iLen + 1
      ElseIf sChar = &quot;&quot;&quot;&quot; Then
        REM Move to the first double quote
        oTCurs.goRight(iPos-1, False)

        REM Remember the location of the first double quote
        REM and then find then end of the quoted text.
        i = iPos
        FMT_FindEndQuoteDouble(sLine$, iPos%, iLen%)

        REM Move the cursor to the closing double quote.
        REM Set the character style for the string.
        REM Move the cursor back to the start of the paragraph.
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Literal)
        oTCurs.gotoRange(oCurs.start, False)
      ElseIf FMT_FindNumberEnd(sLine, iPos, iLen, i) Then
        REM Move to the number start.
        oTCurs.goRight(iPos-1, False)
        oTCurs.goRight(i - iPos, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Literal)
        oTCurs.gotoRange(oCurs.start, False)
        iPos = i
      ElseIf sChar = &quot;.&quot; OR FMT_IsSpecialChar(ASC(sChar)) Then
        i = iPos
        oTCurs.goRight(iPos - 1, False)

        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then Exit Do
        Loop Until NOT FMT_IsSpecialChar(ASC(Mid(sLine, iPos, 1)))
        oTCurs.goRight(iPos - i, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Special)
        oTCurs.gotoRange(oCurs.start, False)
      ElseIf sChar = &quot;_&quot; AND iPos = iLen Then
        REM An Identifier can start with an &quot;_&quot; (I think).
        REM It is likely that trailing spaces will be in a text
        REM document, but we will ignore these for now!
        oTCurs.goRight(iPos-1, False)
        oTCurs.goRight(1, True)
        oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
        oTCurs.gotoRange(oCurs.start, False)
        iPos = iPos + 1
      Else
        REM No special characters, so this is a variable 
        REM or logic statement. Move to the first character.
        i = iPos
        oTCurs.goRight(iPos-1, False)
        Do
          iPos = iPos + 1
          If iPos &gt; iLen Then Exit Do
        Loop Until FMT_IsWordSep(Asc(Mid(sLine, iPos, 1)))

        oTCurs.goRight(iPos - i, True)
        sChar = LCase(oTCurs.getString())

        REM This could be a problem for a variable named
        REM &quot;rem.doit.var&quot;. The Basic IDE misses this as well
        REM so I am not concerned.
        If sChar = &quot;rem&quot; Then
          REM Mark the Rem itself
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
          REM Mark to the end as a comment
          oTCurs.goRight(0, False)
          oTCurs.gotoEndOfParagraph(True)
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Comment)
          iPos = iLen + 1
        ElseIf FMT_ArrayHasString(sChar, sTokens()) Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_KeyWord)
        ElseIf FMT_ArrayHasString(sChar, sAltTokens()) Then
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_AltWord)
        Else
          oTCurs.CharStyleName = sCharStyles(FMT_CSNI_Ident)
        End If

        oTCurs.gotoRange(oCurs.start, False)
      End If
    Loop
    If Not oCurs.gotoNextParagraph(False) Then Exit Do
    oTCurs.gotoRange(oCurs, False)
    If NOT FMT_CursorToParEnd(oText, oSel, oCurs) Then Exit Do
  Loop
End Sub

&apos;****************************************************************
&apos;** The following words are tokens recognized by the Basic IDE.
&apos;** This listis in alphabetical order. I got this list from 
&apos;** the file: basic/source/comp/tokens.cxx.
&apos;** Multi-word tokens such as &quot;end enum&quot; are redundant because
&apos;** the code recognizes single words. Both words are in the list
&apos;** already, so in the worst case, this will simply slow down
&apos;** the search because there are extra words.
&apos;****************************************************************
Sub FMT_InitTokensBasic(sTokens())
  sTokens() = Array(&quot;access&quot;, _
    &quot;abs&quot;, &quot;alias&quot;, &quot;and&quot;, &quot;any&quot;, &quot;append&quot;, &quot;array&quot;, &quot;as&quot;, &quot;asc&quot;, &quot;atn&quot;, _
    &quot;base&quot;, &quot;basiclibraries&quot;, &quot;binary&quot;, &quot;boolean&quot;, &quot;byref&quot;, &quot;byval&quot;, _
    &quot;call&quot;, &quot;case&quot;, &quot;cbool&quot;, &quot;cbyte&quot;, &quot;ccur&quot;, &quot;cdate&quot;, &quot;cdatefromiso&quot;, &quot;cdatetoiso&quot;, &quot;cdbl&quot;, _
    &quot;cdec&quot;, &quot;cdecl&quot;, &quot;chr&quot;, &quot;cint&quot;, &quot;classmodule&quot;, _
    &quot;clng&quot;, &quot;close&quot;, &quot;compare&quot;, &quot;compatibilitymode&quot;, &quot;compatible&quot;, &quot;const&quot;, &quot;convertfromurl&quot;, _
    &quot;converttourl&quot;, &quot;cos&quot;, &quot;createobject&quot;, &quot;createunodialog&quot;, &quot;createunolistener&quot;, _
    &quot;createunoservice&quot;, &quot;createunostruct&quot;, &quot;createunovalue&quot;, &quot;csng&quot;, &quot;cstr&quot;, _
    &quot;curdir&quot;, &quot;currency&quot;, &quot;cverr&quot;, _
    &quot;date&quot;, &quot;dateadd&quot;, &quot;datediff&quot;, &quot;datepart&quot;, &quot;dateserial&quot;, &quot;datevalue&quot;, &quot;day&quot;, _
    &quot;declare&quot;, &quot;defbool&quot;, &quot;defcur&quot;, &quot;defdate&quot;, _
    &quot;defdbl&quot;, &quot;deferr&quot;, &quot;defint&quot;, &quot;deflng&quot;, &quot;defobj&quot;, _
    &quot;defsng&quot;, &quot;defstr&quot;, &quot;defvar&quot;, &quot;dialoglibraries&quot;, &quot;dim&quot;, &quot;dimarray&quot;, &quot;dir&quot;, &quot;do&quot;, &quot;double&quot;, _
    &quot;each&quot;, &quot;else&quot;, &quot;elseif&quot;, &quot;end&quot;, &quot;equalunoobjects&quot;, _
    &quot;end enum&quot;, &quot;end function&quot;, &quot;end if&quot;, &quot;end property&quot;, _
    &quot;end select&quot;, &quot;end sub&quot;, &quot;end type&quot;, _
    &quot;endif&quot;, &quot;enum&quot;, &quot;eof&quot;, &quot;eqv&quot;, &quot;erase&quot;, &quot;erl&quot;, &quot;err&quot;, &quot;error&quot;, _
    &quot;exit&quot;, &quot;exp&quot;, &quot;explicit&quot;, _
    &quot;fileattr&quot;, &quot;filecopy&quot;, &quot;filedatetime&quot;, &quot;fileexists&quot;, &quot;filelen&quot;, &quot;fix&quot;, _
    &quot;for&quot;, &quot;format&quot;, &quot;formatdatetime&quot;, &quot;freefile&quot;, &quot;function&quot;, _
    &quot;get&quot;, &quot;getattr&quot;, &quot;getdefaultcontext&quot;, &quot;getpathseparator&quot;, &quot;getprocessservicemanager&quot;, _
    &quot;getsystemticks&quot;, &quot;global&quot;, &quot;globalscope&quot;, &quot;gosub&quot;, &quot;goto&quot;, _
    &quot;hasunointerfaces&quot;, &quot;hex&quot;, &quot;hour&quot;, _
    &quot;if&quot;, &quot;iif&quot;, &quot;imp&quot;, &quot;implements&quot;, &quot;in&quot;, &quot;input&quot;, &quot;inputbox&quot;, _
    &quot;instr&quot;, &quot;instrrev&quot;, &quot;int&quot;, _
    &quot;integer&quot;, &quot;is&quot;, &quot;isarray&quot;, &quot;isdate&quot;, &quot;ismissing&quot;, &quot;isnull&quot;, _
    &quot;isnumeric&quot;, &quot;isobject&quot;, &quot;isunostruct&quot;, _
    &quot;join&quot;, &quot;kill&quot;, _
    &quot;lbound&quot;, &quot;lcase&quot;, &quot;left&quot;, &quot;len&quot;, &quot;let&quot;, &quot;lib&quot;, &quot;line&quot;, &quot;loc&quot;, &quot;local&quot;, _
    &quot;lock&quot;, &quot;lof&quot;, &quot;log&quot;, &quot;long&quot;, _
    &quot;loop&quot;, &quot;lprint&quot;, &quot;lset&quot;, &quot;ltrim&quot;, _
    &quot;mid&quot;, &quot;minute&quot;, &quot;mod&quot;, &quot;month&quot;, &quot;monthname&quot;, &quot;mkdir&quot;, &quot;msgbox&quot;,  _
    &quot;name&quot;, &quot;new&quot;, &quot;next&quot;, &quot;not&quot;, &quot;now&quot;, _
    &quot;object&quot;, &quot;oct&quot;, &quot;on&quot;, &quot;open&quot;, &quot;option&quot;, _
    &quot;optional&quot;, &quot;or&quot;, &quot;output&quot;, _
    &quot;paramarray&quot;, &quot;preserve&quot;, &quot;print&quot;,  _
    &quot;private&quot;, &quot;property&quot;, &quot;public&quot;, &quot;put&quot;, _
    &quot;random&quot;, &quot;randomize&quot;, &quot;read&quot;, &quot;redim&quot;, &quot;rem&quot;, &quot;replace&quot;, &quot;reset&quot;, &quot;resume&quot;, _
    &quot;return&quot;, &quot;right&quot;, &quot;rmdir&quot;, &quot;rnd&quot;, &quot;rset&quot;, &quot;rtrim&quot;, _
    &quot;seek&quot;, &quot;second&quot;, &quot;select&quot;, &quot;set&quot;, &quot;setattr&quot;, &quot;shared&quot;, &quot;sgn&quot;, &quot;sin&quot;, _
    &quot;single&quot;, &quot;space&quot;, &quot;split&quot;, &quot;sqr&quot;, &quot;stardesktop&quot;, &quot;static&quot;, _
    &quot;step&quot;, &quot;stop&quot;, &quot;str&quot;, &quot;strcomp&quot;, &quot;strconv&quot;, &quot;string&quot;, &quot;strreverse&quot;, &quot;sub&quot;, &quot;system&quot;, _
    &quot;tan&quot;, &quot;text&quot;, &quot;then&quot;, &quot;thiscomponent&quot;, &quot;time&quot;, &quot;timer&quot;, &quot;timeserial&quot;, &quot;timevalue&quot;, &quot;to&quot;, _
    &quot;trim&quot;, &quot;type&quot;, &quot;typename&quot;, &quot;typeof&quot;, _
    &quot;ubound&quot;, &quot;ucase&quot;, &quot;until&quot;, _
    &quot;val&quot;, &quot;variant&quot;, &quot;vartype&quot;, _
    &quot;weekday&quot;, &quot;weekdayname&quot;, &quot;wend&quot;, &quot;while&quot;, &quot;with&quot;, &quot;write&quot;, _
    &quot;xor&quot;, &quot;year&quot;)
    FMT_SortStringArrayAscending(sTokens())
End Sub

&apos;****************************************************************
&apos;** Alternate Tokens such as system class libraries and functions
&apos;** that you want to recognize.
&apos;****************************************************************
Sub FMT_InitAltTokensBasic(sAltTokens())
  sAltTokens() = Array()
  FMT_SortStringArrayAscending(sAltTokens())
End Sub

&apos;****************************************************************
&apos;** Code listings are formatted using specific paragraph styles.
&apos;** The relevant paragraph styles are listed here.
&apos;****************************************************************
Sub FMT_InitParStyles(sStyles())
  sStyles() = Array( &quot;_OOoComputerCode&quot;, _
   &quot;_OOoComputerCodeInTable&quot;, _
   &quot;_OOoComputerCodeLastLine&quot;, _
   &quot;_code&quot;, _
   &quot;_code_first_line&quot;, _
   &quot;_code_last_line&quot;, _
   &quot;_code_one_line&quot;)
   FMT_SortStringArrayAscending(sStyles())
End Sub

&apos;****************************************************************
&apos;** Get the character styles meant for highlighting StarBasic code.
&apos;** Special characters are formatted as a keyword.
&apos;****************************************************************
Function FMT_GetBasicCharacterStyles()
  CreateStarBasicCharStyles()
  FMT_GetBasicCharacterStyles() = Array( &quot;_OOoComputerComment&quot;, _
      &quot;_OOoComputerLiteral&quot;, &quot;_OOoComputerKeyWord&quot;, _
      &quot;_OOoComputerIdent&quot;, &quot;_OOoComputerSpecial&quot;, &quot;_OOoComputerNumber&quot;, &quot;_OOoComputerAltKeyWord&quot;)
End Function


</script:module>